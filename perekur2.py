import logging
import json
import os
from collections import defaultdict, Counter
from datetime import datetime, timedelta, time
import io
import random
import matplotlib.pyplot as plt
import numpy as np

from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    MessageHandler, filters, PollAnswerHandler
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = -1003072750672
ADMIN_ID = 284884293
DATA_FILE = "bot_data.json"
BACKUP_FILE = "bot_data_backup.json"
POLL_DURATION = 600  # 10 –º–∏–Ω—É—Ç
COOLDOWN = timedelta(minutes=15)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π (–¥–æ 1000 –æ—Ç–≤–µ—Ç–æ–≤)
SMOKER_LEVELS = {
    0: "–ö—É—Ä–∏–ª—å—â–∏–∫ 0 lvl",
    10: "–ö—É—Ä–∏–ª—å—â–∏–∫ 1 lvl", 
    20: "–ö—É—Ä–∏–ª—å—â–∏–∫ 2 lvl",
    30: "–ö—É—Ä–∏–ª—å—â–∏–∫ 3 lvl",
    40: "–ö—É—Ä–∏–ª—å—â–∏–∫ 4 lvl",
    50: "–ö—É—Ä–∏–ª—å—â–∏–∫ 5 lvl",
    60: "–ö—É—Ä–∏–ª—å—â–∏–∫ 6 lvl",
    70: "–ö—É—Ä–∏–ª—å—â–∏–∫ 7 lvl",
    80: "–ö—É—Ä–∏–ª—å—â–∏–∫ 8 lvl",
    90: "–ö—É—Ä–∏–ª—å—â–∏–∫ 9 lvl",
    100: "–ö—É—Ä–∏–ª—å—â–∏–∫ 10 lvl",
    150: "–ö—É—Ä–∏–ª—å—â–∏–∫ 15 lvl",
    200: "–ö—É—Ä–∏–ª—å—â–∏–∫ 20 lvl",
    250: "–ö—É—Ä–∏–ª—å—â–∏–∫ 25 lvl",
    300: "–ö—É—Ä–∏–ª—å—â–∏–∫ 30 lvl",
    350: "–ö—É—Ä–∏–ª—å—â–∏–∫ 35 lvl",
    400: "–ö—É—Ä–∏–ª—å—â–∏–∫ 40 lvl",
    450: "–ö—É—Ä–∏–ª—å—â–∏–∫ 45 lvl",
    500: "–ö—É—Ä–∏–ª—å—â–∏–∫ 50 lvl",
    550: "–ö—É—Ä–∏–ª—å—â–∏–∫ 55 lvl",
    600: "–ö—É—Ä–∏–ª—å—â–∏–∫ 60 lvl",
    650: "–ö—É—Ä–∏–ª—å—â–∏–∫ 65 lvl",
    700: "–ö—É—Ä–∏–ª—å—â–∏–∫ 70 lvl",
    750: "–ö—É—Ä–∏–ª—å—â–∏–∫ 75 lvl",
    800: "–ö—É—Ä–∏–ª—å—â–∏–∫ 80 lvl",
    850: "–ö—É—Ä–∏–ª—å—â–∏–∫ 85 lvl",
    900: "–ö—É—Ä–∏–ª—å—â–∏–∫ 90 lvl",
    950: "–ö—É—Ä–∏–ª—å—â–∏–∫ 95 lvl",
    1000: "–ö—É—Ä–∏–ª—å—â–∏–∫ MAX lvl"
}

WORKER_LEVELS = {
    0: "–†–∞–±–æ—Ç—è–≥–∞ 0 lvl",
    10: "–†–∞–±–æ—Ç—è–≥–∞ 1 lvl",
    20: "–†–∞–±–æ—Ç—è–≥–∞ 2 lvl", 
    30: "–†–∞–±–æ—Ç—è–≥–∞ 3 lvl",
    40: "–†–∞–±–æ—Ç—è–≥–∞ 4 lvl",
    50: "–†–∞–±–æ—Ç—è–≥–∞ 5 lvl",
    60: "–†–∞–±–æ—Ç—è–≥–∞ 6 lvl",
    70: "–†–∞–±–æ—Ç—è–≥–∞ 7 lvl",
    80: "–†–∞–±–æ—Ç—è–≥–∞ 8 lvl",
    90: "–†–∞–±–æ—Ç—è–≥–∞ 9 lvl",
    100: "–†–∞–±–æ—Ç—è–≥–∞ 10 lvl",
    150: "–†–∞–±–æ—Ç—è–≥–∞ 15 lvl",
    200: "–†–∞–±–æ—Ç—è–≥–∞ 20 lvl",
    250: "–†–∞–±–æ—Ç—è–≥–∞ 25 lvl",
    300: "–†–∞–±–æ—Ç—è–≥–∞ 30 lvl",
    350: "–†–∞–±–æ—Ç—è–≥–∞ 35 lvl",
    400: "–†–∞–±–æ—Ç—è–≥–∞ 40 lvl",
    450: "–†–∞–±–æ—Ç—è–≥–∞ 45 lvl",
    500: "–†–∞–±–æ—Ç—è–≥–∞ 50 lvl",
    550: "–†–∞–±–æ—Ç—è–≥–∞ 55 lvl",
    600: "–†–∞–±–æ—Ç—è–≥–∞ 60 lvl",
    650: "–†–∞–±–æ—Ç—è–≥–∞ 65 lvl",
    700: "–†–∞–±–æ—Ç—è–≥–∞ 70 lvl",
    750: "–†–∞–±–æ—Ç—è–≥–∞ 75 lvl",
    800: "–†–∞–±–æ—Ç—è–≥–∞ 80 lvl",
    850: "–†–∞–±–æ—Ç—è–≥–∞ 85 lvl",
    900: "–†–∞–±–æ—Ç—è–≥–∞ 90 lvl",
    950: "–†–∞–±–æ—Ç—è–≥–∞ 95 lvl",
    1000: "–†–∞–±–æ—Ç—è–≥–∞ MAX lvl"
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞—á–∏–≤–æ–∫
ACHIEVEMENT_STICKERS_20 = 20
ACHIEVEMENT_PHOTOS_20 = 20
CONSECUTIVE_THRESHOLD = 5

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- –ö–Ω–æ–ø–∫–∏ ---
main_keyboard = [["–ö—É—Ä–∏—Ç—å üö¨"]]
reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
active_poll_id = None
active_poll_options = []
poll_votes = {}  # –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–ø—Ä–æ—Å–µ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
stats_yes = defaultdict(int)
stats_no = defaultdict(int)
stats_stickers = defaultdict(int)
stats_photos = defaultdict(int)
usernames = {}
sessions = []  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞)
last_poll_time = None
consecutive_yes = defaultdict(int)
consecutive_no = defaultdict(int)
consecutive_button_press = defaultdict(int)
last_button_press_time = defaultdict(lambda: datetime.min)
achievements_unlocked = defaultdict(set)
successful_polls = []  # –£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–∫—É—Ä—ã (–æ–ø—Ä–æ—Å—ã —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –≥–æ–ª–æ—Å–æ–º "–î–∞")
user_levels = defaultdict(dict)  # {user_id: {"smoker_level": int, "worker_level": int}}

# --- –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–ê –î–ù–Ø ---
content_submissions = {}  # {user_id: {"message": message, "date": datetime}}
asked_today = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
current_content_author = None  # –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
def setup_plot_style():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    plt.style.use('seaborn-v0_8')
    plt.rcParams['font.family'] = 'DejaVu Sans'
    plt.rcParams['axes.facecolor'] = '#f8f9fa'
    plt.rcParams['figure.facecolor'] = '#ffffff'

def create_user_stats_plot(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    setup_plot_style()
    
    user_sessions = [(t, ans) for t, uid, ans in sessions if uid == user_id]
    if not user_sessions:
        return None
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    username = usernames.get(user_id, f"User{user_id}")
    fig.suptitle(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}', fontsize=14, fontweight='bold')
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers = Counter(ans for _, ans in user_sessions)
    colors = ['#28a745', '#dc3545']  # –¢–æ–ª—å–∫–æ –î–∞ –∏ –ù–µ—Ç
    axes[0, 0].pie(user_answers.values(), labels=user_answers.keys(), autopct='%1.1f%%',
                   colors=colors[:len(user_answers)], startangle=90)
    axes[0, 0].set_title('–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã')
    
    # 2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    day_count = [0] * 7
    for t, _ in user_sessions:
        day_count[t.weekday()] += 1
    
    axes[0, 1].bar(days, day_count, color='#007bff', alpha=0.7)
    axes[0, 1].set_title('–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏')
    axes[0, 1].set_ylabel('–ì–æ–ª–æ—Å–æ–≤')
    axes[0, 1].grid(True, alpha=0.3)
    
    # 3. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º (7:00-17:00)
    work_periods = ['7-8', '8-9', '9-10', '10-11', '11-12', '12-13', '13-14', '14-15', '15-16', '16-17']
    period_count = [0] * 10
    
    for t, _ in user_sessions:
        hour = t.hour
        # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å 7:00 –¥–æ 17:00
        if 7 <= hour < 17:
            period_index = hour - 7
            period_count[period_index] += 1
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    active_periods = []
    active_counts = []
    for i, count in enumerate(period_count):
        if count > 0:
            active_periods.append(work_periods[i])
            active_counts.append(count)
    
    if active_counts:
        axes[1, 0].bar(active_periods, active_counts, color='#20c997', alpha=0.7)
        axes[1, 0].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º')
        axes[1, 0].set_ylabel('–ì–æ–ª–æ—Å–æ–≤')
        axes[1, 0].grid(True, alpha=0.3)
        plt.setp(axes[1, 0].xaxis.get_majorticklabels(), rotation=45)
    else:
        axes[1, 0].text(0.5, 0.5, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n–≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã', 
                       ha='center', va='center', transform=axes[1, 0].transAxes)
        axes[1, 0].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º')
    
    # 4. –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    today = datetime.now().date()
    last_week = [today - timedelta(days=i) for i in range(6, -1, -1)]
    week_dates = [d.strftime('%d.%m') for d in last_week]
    week_count = [0] * 7
    
    for t, _ in user_sessions:
        session_date = t.date()
        for i, date_obj in enumerate(last_week):
            if session_date == date_obj:
                week_count[i] += 1
                break
    
    axes[1, 1].plot(week_dates, week_count, marker='o', linewidth=2, color='#dc3545')
    axes[1, 1].fill_between(week_dates, week_count, alpha=0.3, color='#dc3545')
    axes[1, 1].set_title('–ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é')
    axes[1, 1].set_ylabel('–ì–æ–ª–æ—Å–æ–≤ –≤ –¥–µ–Ω—å')
    axes[1, 1].grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    
    plt.tight_layout()
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

def create_statistics_plot():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    setup_plot_style()
    
    if not sessions:
        return None
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫—É—Ä–æ–≤', fontsize=16, fontweight='bold')
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    answers_count = {
        '–î–∞, –∫–æ–Ω–µ—á–Ω–æ': sum(1 for _, _, ans in sessions if ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ"),
        '–ù–µ—Ç': sum(1 for _, _, ans in sessions if ans == "–ù–µ—Ç")
    }
    
    colors = ['#28a745', '#dc3545']  # –¢–æ–ª—å–∫–æ –î–∞ –∏ –ù–µ—Ç
    axes[0, 0].pie(answers_count.values(), labels=answers_count.keys(), autopct='%1.1f%%', 
                   colors=colors, startangle=90)
    axes[0, 0].set_title('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤')
    
    # 2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    day_count = [0] * 7
    for t, _, _ in sessions:
        day_count[t.weekday()] += 1
    
    axes[0, 1].bar(days, day_count, color='#007bff', alpha=0.7)
    axes[0, 1].set_title('üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
    axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤')
    axes[0, 1].grid(True, alpha=0.3)
    
    # 3. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º (7:00-17:00)
    work_periods = ['7-8', '8-9', '9-10', '10-11', '11-12', '12-13', '13-14', '14-15', '15-16', '16-17']
    period_count = [0] * 10
    
    for t, _, _ in sessions:
        hour = t.hour
        # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å 7:00 –¥–æ 17:00
        if 7 <= hour < 17:
            period_index = hour - 7
            period_count[period_index] += 1
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    active_periods = []
    active_counts = []
    for i, count in enumerate(period_count):
        if count > 0:
            active_periods.append(work_periods[i])
            active_counts.append(count)
    
    if active_counts:
        axes[1, 0].bar(active_periods, active_counts, color='#20c997', alpha=0.7)
        axes[1, 0].set_title('üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º')
        axes[1, 0].set_xlabel('–ß–∞—Å–æ–≤—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏')
        axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤')
        axes[1, 0].grid(True, alpha=0.3)
        plt.setp(axes[1, 0].xaxis.get_majorticklabels(), rotation=45)
    else:
        axes[1, 0].text(0.5, 0.5, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n–≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã', 
                       ha='center', va='center', transform=axes[1, 0].transAxes)
        axes[1, 0].set_title('üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º')
    
    # 4. –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_yes = defaultdict(int)
    for _, uid, ans in sessions:
        if ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ":
            user_yes[uid] += 1
    
    if user_yes:
        top_users = sorted(user_yes.items(), key=lambda x: x[1], reverse=True)[:8]
        user_names = [usernames.get(uid, f"User{uid}")[:15] for uid, _ in top_users]
        user_counts = [count for _, count in top_users]
        
        y_pos = np.arange(len(user_names))
        axes[1, 1].barh(y_pos, user_counts, color='#fd7e14', alpha=0.7)
        axes[1, 1].set_yticks(y_pos)
        axes[1, 1].set_yticklabels(user_names)
        axes[1, 1].set_title('üèÜ –¢–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤')
        axes[1, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–î–∞"')
    
    plt.tight_layout()
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ ---
def create_backup():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as source:
                data = source.read()
            with open(BACKUP_FILE, 'w', encoding='utf-8') as target:
                target.write(data)
            logger.info("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")

def save_data():
    create_backup()
    data = {
        "stats_yes": dict(stats_yes),
        "stats_no": dict(stats_no),
        "stats_stickers": dict(stats_stickers),
        "stats_photos": dict(stats_photos),
        "usernames": usernames,
        "sessions": [(t.isoformat(), uid, ans) for t, uid, ans in sessions],
        "consecutive_yes": dict(consecutive_yes),
        "consecutive_no": dict(consecutive_no),
        "consecutive_button_press": dict(consecutive_button_press),
        "last_button_press_time": {str(k): v.isoformat() for k, v in last_button_press_time.items()},
        "achievements_unlocked": {str(uid): list(achs) for uid, achs in achievements_unlocked.items()},
        "successful_polls": [t.isoformat() for t in successful_polls],
        "user_levels": {str(uid): levels for uid, levels in user_levels.items()},
        # –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ asked_today
        "asked_today": list(asked_today),
    }
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def load_data():
    global stats_yes, stats_no, stats_stickers, stats_photos
    global usernames, sessions, consecutive_yes, consecutive_no, consecutive_button_press
    global last_button_press_time, achievements_unlocked, successful_polls, user_levels
    global asked_today
    
    if not os.path.exists(DATA_FILE):
        logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
        return
    
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        stats_yes.update(data.get("stats_yes", {}))
        stats_no.update(data.get("stats_no", {}))
        stats_stickers.update(data.get("stats_stickers", {}))
        stats_photos.update(data.get("stats_photos", {}))
        usernames.update(data.get("usernames", {}))
        sessions.extend([(datetime.fromisoformat(t), uid, ans) for t, uid, ans in data.get("sessions", [])])
        consecutive_yes.update(data.get("consecutive_yes", {}))
        consecutive_no.update(data.get("consecutive_no", {}))
        consecutive_button_press.update(data.get("consecutive_button_press", {}))
        successful_polls.extend([datetime.fromisoformat(t) for t in data.get("successful_polls", [])])
        user_levels.update({int(uid): levels for uid, levels in data.get("user_levels", {}).items()})
        
        # –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–ê: –∑–∞–≥—Ä—É–∂–∞–µ–º asked_today
        asked_today.update(data.get("asked_today", []))
        
        last_button_press_time_data = data.get("last_button_press_time", {})
        for k, v in last_button_press_time_data.items():
            try:
                last_button_press_time[int(k)] = datetime.fromisoformat(v)
            except (ValueError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {k}: {e}")
        
        for uid, achs in data.get("achievements_unlocked", {}).items():
            try:
                achievements_unlocked[int(uid)].update(achs)
            except (ValueError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—á–∏–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –í—ã–¥–∞—á–∞ –∞—á–∏–≤–æ–∫ ---
async def give_achievement(user_id: int, context: ContextTypes.DEFAULT_TYPE, achievement_name: str):
    if achievement_name not in achievements_unlocked[user_id]:
        achievements_unlocked[user_id].add(achievement_name)
        save_data()
        
        try:
            await context.bot.send_message(chat_id=user_id, text=f"üèÖ –ê—á–∏–≤–∫–∞: {achievement_name}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—á–∏–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        try:
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=f"üéâ {username} –ø–æ–ª—É—á–∏–ª(–∞) –∞—á–∏–≤–∫—É: {achievement_name}!")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

# --- –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π ---
def get_smoker_level(yes_count: int) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏–ª—å—â–∏–∫–∞ –∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä–æ–≥"""
    level_thresholds = sorted(SMOKER_LEVELS.keys(), reverse=True)
    for threshold in level_thresholds:
        if yes_count >= threshold:
            return SMOKER_LEVELS[threshold], threshold
    return SMOKER_LEVELS[0], 0

def get_worker_level(no_count: int) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–∞–±–æ—Ç—è–≥–∏ –∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä–æ–≥"""
    level_thresholds = sorted(WORKER_LEVELS.keys(), reverse=True)
    for threshold in level_thresholds:
        if no_count >= threshold:
            return WORKER_LEVELS[threshold], threshold
    return WORKER_LEVELS[0], 0

async def check_level_up(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    yes_count = stats_yes[user_id]
    no_count = stats_no[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏ –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    current_smoker_level = user_levels[user_id].get("smoker_level", 0)
    current_worker_level = user_levels[user_id].get("worker_level", 0)
    
    new_smoker_level, smoker_threshold = get_smoker_level(yes_count)
    new_worker_level, worker_threshold = get_worker_level(no_count)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫—É—Ä–∏–ª—å—â–∏–∫–∞
    if smoker_threshold > current_smoker_level:
        user_levels[user_id]["smoker_level"] = smoker_threshold
        username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
        try:
            await context.bot.send_message(
                chat_id=user_id, 
                text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: {new_smoker_level}!"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"üö¨ {username} –ø–æ–≤—ã—Å–∏–ª(–∞) —É—Ä–æ–≤–µ–Ω—å –¥–æ {new_smoker_level}! üéâ"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏–ª—å—â–∏–∫–∞ –¥–æ {new_smoker_level}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∞–±–æ—Ç—è–≥–∏
    if worker_threshold > current_worker_level:
        user_levels[user_id]["worker_level"] = worker_threshold
        username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
        try:
            await context.bot.send_message(
                chat_id=user_id, 
                text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: {new_worker_level}!"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"üí™ {username} –ø–æ–≤—ã—Å–∏–ª(–∞) —É—Ä–æ–≤–µ–Ω—å –¥–æ {new_worker_level}! üéâ"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å —Ä–∞–±–æ—Ç—è–≥–∏ –¥–æ {new_worker_level}")
    
    save_data()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—á–∏–≤–æ–∫ ---
async def check_achievements(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—á–∏–≤–æ–∫
    now_utc = datetime.utcnow()
    now_ekt = now_utc + timedelta(hours=5)  # YEKT = UTC + 5
    
    week_ago = now_ekt - timedelta(days=7)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    yes_week = sum(1 for t, uid, ans in sessions 
                  if uid == user_id and ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ" 
                  and (t + timedelta(hours=5)) >= week_ago)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤ –ï–ö–ë
    no_week = sum(1 for t, uid, ans in sessions 
                 if uid == user_id and ans == "–ù–µ—Ç" 
                 and (t + timedelta(hours=5)) >= week_ago)

    if consecutive_yes[user_id] >= CONSECUTIVE_THRESHOLD:
        await give_achievement(user_id, context, "–°–µ—Ä–∏–π–Ω—ã–π –∫—É—Ä–∏–ª—å—â–∏–∫")
    if consecutive_no[user_id] >= CONSECUTIVE_THRESHOLD:
        await give_achievement(user_id, context, "–°–µ—Ä–∏–π–Ω—ã–π –ó–û–ñ–Ω–∏–∫")

    h = now_ekt.hour  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    if consecutive_yes[user_id] >= 1:
        if 0 <= h <= 7:
            await give_achievement(user_id, context, "–†–∞–Ω–Ω–∏–π –ø–µ—Ä–µ–∫—É—Ä")
        elif 17 <= h <= 23:
            await give_achievement(user_id, context, "–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞")

    if stats_stickers[user_id] >= ACHIEVEMENT_STICKERS_20:
        await give_achievement(user_id, context, "–°—Ç–∏–∫–µ—Ä–æ(WO)MAN")
    if stats_photos[user_id] >= ACHIEVEMENT_PHOTOS_20:
        await give_achievement(user_id, context, "–ú–µ–º–æ–ª–æ–≥")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
    await check_level_up(user_id, context)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–ø–æ–≤ ---
def get_grouped_top(stats_dict, level_func):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ø —Å —É—á–µ—Ç–æ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞)"""
    if not stats_dict:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sorted_stats = sorted(stats_dict.items(), key=lambda x: x[1], reverse=True)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
    groups = []
    current_group = []
    current_value = None
    
    for user_id, count in sorted_stats:
        if count != current_value:
            if current_group:
                groups.append(current_group)
            current_value = count
            current_group = [(user_id, count)]
        else:
            current_group.append((user_id, count))
    
    if current_group:
        groups.append(current_group)
    
    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ—Å—Ç–∞ (1, 2, 3) –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
    result = []
    
    for place, group in enumerate(groups, 1):
        if place > 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–º—è –º–µ—Å—Ç–∞–º–∏
            break
            
        # –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–ª—É—á–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –º–µ—Å—Ç–æ
        for user_id, count in group:
            username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            level_name, _ = level_func(count)
            result.append((place, username, count, level_name))
    
    return result

# --- –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–ê –î–ù–Ø ---
def get_active_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
    now_ekt = datetime.utcnow() + timedelta(hours=5)
    week_ago = now_ekt - timedelta(days=7)
    active_users = set()
    
    for t, uid, _ in sessions:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤ –ï–ö–ë –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        session_time_ekt = t + timedelta(hours=5)
        if session_time_ekt >= week_ago:
            active_users.add(uid)
    
    return list(active_users)

def reset_daily_content():
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    global asked_today, content_submissions, current_content_author
    asked_today.clear()
    content_submissions.clear()
    current_content_author = None
    logger.info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ")

async def ask_for_content(context: ContextTypes.DEFAULT_TYPE, user_id: int = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global current_content_author
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ü–Ω-–ü—Ç) –ø–æ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    now_ekt = datetime.utcnow() + timedelta(hours=5)
    if now_ekt.weekday() >= 5:  # 5=–°–±, 6=–í—Å
        logger.info("üìÖ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ
    if user_id is None:
        active_users = get_active_users()
        if not active_users:
            logger.info("üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
        available_users = [uid for uid in active_users if uid not in asked_today]
        if not available_users:
            logger.info("üìù –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –±—ã–ª–∏ –æ–ø—Ä–æ—à–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è")
            return
        
        user_id = random.choice(available_users)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
    current_content_author = user_id
    asked_today.add(user_id)
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="üé≠ *–ü—Ä–∏–≤–µ—Ç! –¢—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫!*\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è *–∞–Ω–æ–Ω–∏–º–Ω–æ–π* –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –æ–±—â–µ–º —á–∞—Ç–µ:\n"
                 "‚Ä¢ üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞/–º–µ–º\n"
                 "‚Ä¢ üé¨ –í–∏–¥–µ–æ/GIF\n" 
                 "‚Ä¢ üéµ –ú—É–∑—ã–∫–∞/–∞—É–¥–∏–æ\n"
                 "‚Ä¢ üìù –¢–µ–∫—Å—Ç (–∞–Ω–µ–∫–¥–æ—Ç, —à—É—Ç–∫–∞, —Ñ–∞–∫—Ç)\n"
                 "‚Ä¢ üìé –§–∞–π–ª\n\n"
                 "–Ø –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª—é —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É *–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞*.\n\n"
                 "–ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ 10:00 ‚è∞",
            parse_mode='Markdown'
        )
        
        logger.info(f"üì® –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ask_for_content(context)

async def handle_content_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if user_id not in asked_today:
        return
    
    today_ekt = (datetime.utcnow() + timedelta(hours=5)).date()
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        content_submissions[user_id] = {
            "message": message,
            "date": datetime.utcnow()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UTC
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
        content_type = "—Ç–µ–∫—Å—Ç"
        if message.photo:
            content_type = "–∫–∞—Ä—Ç–∏–Ω–∫–∞"
        elif message.video:
            content_type = "–≤–∏–¥–µ–æ" 
        elif message.audio:
            content_type = "–∞—É–¥–∏–æ"
        elif message.document:
            content_type = "—Ñ–∞–π–ª"
        elif message.animation:
            content_type = "GIF"
        elif message.sticker:
            content_type = "—Å—Ç–∏–∫–µ—Ä"
        elif message.voice:
            content_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        await message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π {content_type} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
            f"–û–Ω –±—É–¥–µ—Ç *–∞–Ω–æ–Ω–∏–º–Ω–æ* –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –æ–±—â–µ–º —á–∞—Ç–µ —Å–µ–≥–æ–¥–Ω—è –≤ 10:00 üïô\n\n"
            f"_–ù–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –±—ã–ª —Ç—ã_ üòâ",
            parse_mode='Markdown'
        )
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø–∞ '{content_type}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

async def publish_daily_content(context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ 10:00"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
    today_ekt = (datetime.utcnow() + timedelta(hours=5)).date()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    if (datetime.utcnow() + timedelta(hours=5)).weekday() >= 5:
        logger.info("üìÖ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return
    
    if not content_submissions:
        logger.info("üì≠ –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–µ–≥–æ–¥–Ω—è")
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text="üì∞ *–ö–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è*\n\n"
                     "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ üòî\n\n"
                     "–ó–∞–≤—Ç—Ä–∞ —É –∫–æ–≥–æ-—Ç–æ –¥—Ä—É–≥–æ–≥–æ –±—É–¥–µ—Ç —à–∞–Ω—Å! üé≤",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text="üì∞ *–ö–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è!*\n\n"
                 "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
            parse_mode='Markdown'
        )
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–Ω–æ–Ω–∏–º–Ω–æ)
        for user_id, submission in content_submissions.items():
            message = submission["message"]
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞)
            if message.text:
                await context.bot.send_message(
                    chat_id=GROUP_CHAT_ID,
                    text=message.text
                )
            elif message.photo:
                await context.bot.send_photo(
                    chat_id=GROUP_CHAT_ID,
                    photo=message.photo[-1].file_id,
                    caption=message.caption
                )
            elif message.video:
                await context.bot.send_video(
                    chat_id=GROUP_CHAT_ID,
                    video=message.video.file_id,
                    caption=message.caption
                )
            elif message.audio:
                await context.bot.send_audio(
                    chat_id=GROUP_CHAT_ID,
                    audio=message.audio.file_id,
                    caption=message.caption
                )
            elif message.document:
                await context.bot.send_document(
                    chat_id=GROUP_CHAT_ID,
                    document=message.document.file_id,
                    caption=message.caption
                )
            elif message.animation:
                await context.bot.send_animation(
                    chat_id=GROUP_CHAT_ID,
                    animation=message.animation.file_id,
                    caption=message.caption
                )
            elif message.sticker:
                await context.bot.send_sticker(
                    chat_id=GROUP_CHAT_ID,
                    sticker=message.sticker.file_id
                )
            elif message.voice:
                await context.bot.send_voice(
                    chat_id=GROUP_CHAT_ID,
                    voice=message.voice.file_id
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text="üé≠ *–ö–æ–Ω—Ç–µ–Ω—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ*\n\n"
                 "–ó–∞–≤—Ç—Ä–∞ —É –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—É–¥–µ—Ç —à–∞–Ω—Å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ–º-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º!",
            parse_mode='Markdown'
        )
        
        logger.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è –æ—Ç {len(content_submissions)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    reset_daily_content()

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫—É—Ä–æ–≤ üö¨\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É '–ö—É—Ä–∏—Ç—å üö¨', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ!",
        reply_markup=reply_markup
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    usernames[user_id] = username
    
    now = datetime.now()
    last_press = last_button_press_time[user_id]
    
    if now - last_press < COOLDOWN:
        remaining = COOLDOWN - (now - last_press)
        await update.message.reply_text(
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ {int(remaining.total_seconds() // 60)} –º–∏–Ω—É—Ç(—ã) –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.",
            reply_markup=reply_markup
        )
        return
    
    last_button_press_time[user_id] = now
    consecutive_button_press[user_id] += 1
    
    if consecutive_button_press[user_id] >= 3:
        await give_achievement(user_id, context, "–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π")
    
    global active_poll_id, active_poll_options, poll_votes, last_poll_time
    if active_poll_id is not None:
        await update.message.reply_text("–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å! –ì–æ–ª–æ—Å—É–π —Ç–∞–º.", reply_markup=reply_markup)
        return
    
    last_poll_time = now
    poll_options = ["–î–∞, –∫–æ–Ω–µ—á–Ω–æ", "–ù–µ—Ç"]
    active_poll_options = poll_options
    
    try:
        message = await context.bot.send_poll(
            chat_id=GROUP_CHAT_ID,
            question=f"–ö—É—Ä–∏—Ç—å? (–æ—Ç @{username})",
            options=poll_options,
            is_anonymous=False,
            allows_multiple_answers=False,
            open_period=POLL_DURATION
        )
        active_poll_id = message.poll.id
        poll_votes = {}
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å {active_poll_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        await update.message.reply_text("‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞.", reply_markup=reply_markup)

async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_poll_id, poll_votes
    if active_poll_id is None or update.poll_answer.poll_id != active_poll_id:
        return
    
    user_id = update.poll_answer.user.id
    username = update.poll_answer.user.username or update.poll_answer.user.first_name
    usernames[user_id] = username
    
    selected_options = update.poll_answer.option_ids
    if not selected_options:
        return
    
    selected_option = active_poll_options[selected_options[0]]
    poll_votes[user_id] = selected_option
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª: {selected_option}")

async def handle_poll_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global active_poll_id, poll_votes
    if active_poll_id is None or update.poll.id != active_poll_id:
        return
    
    if update.poll.is_closed:
        logger.info(f"–û–ø—Ä–æ—Å {active_poll_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        for user_id, answer in poll_votes.items():
            if answer == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ":
                stats_yes[user_id] += 1
                consecutive_yes[user_id] += 1
                consecutive_no[user_id] = 0
            elif answer == "–ù–µ—Ç":
                stats_no[user_id] += 1
                consecutive_no[user_id] += 1
                consecutive_yes[user_id] = 0
            
            sessions.append((last_poll_time, user_id, answer))
            await check_achievements(user_id, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø—Ä–æ—Å–∞
        yes_votes = sum(1 for vote in poll_votes.values() if vote == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ")
        if yes_votes > 0:
            successful_polls.append(last_poll_time)
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–∫—É—Ä! {yes_votes} –≥–æ–ª–æ—Å–æ–≤ '–î–∞'")
        
        save_data()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        active_poll_id = None
        active_poll_options = []
        poll_votes = {}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    usernames[user_id] = username
    
    message = update.message
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤—ã–±—Ä–∞–Ω)
    if user_id in asked_today:
        await handle_content_submission(update, context)
        return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if message.sticker:
        stats_stickers[user_id] += 1
        await check_achievements(user_id, context)
        save_data()
    elif message.photo:
        stats_photos[user_id] += 1
        await check_achievements(user_id, context)
        save_data()

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    
    yes_count = stats_yes[user_id]
    no_count = stats_no[user_id]
    total = yes_count + no_count
    yes_percentage = (yes_count / total * 100) if total > 0 else 0
    
    smoker_level, _ = get_smoker_level(yes_count)
    worker_level, _ = get_worker_level(no_count)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    now_ekt = datetime.utcnow() + timedelta(hours=5)
    week_ago = now_ekt - timedelta(days=7)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    yes_week = sum(1 for t, uid, ans in sessions 
                  if uid == user_id and ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ" 
                  and (t + timedelta(hours=5)) >= week_ago)
    no_week = sum(1 for t, uid, ans in sessions 
                 if uid == user_id and ans == "–ù–µ—Ç" 
                 and (t + timedelta(hours=5)) >= week_ago)
    
    total_week = yes_week + no_week
    yes_week_percentage = (yes_week / total_week * 100) if total_week > 0 else 0
    
    response = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {username}:*\n\n"
        f"*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"üö¨ –î–∞: {yes_count}\n"
        f"üí™ –ù–µ—Ç: {no_count}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–π: {yes_percentage:.1f}%\n\n"
        f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:*\n"
        f"üö¨ –î–∞: {yes_week}\n"
        f"üí™ –ù–µ—Ç: {no_week}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–∏–π: {yes_week_percentage:.1f}%\n\n"
        f"*–£—Ä–æ–≤–Ω–∏:*\n"
        f"üö¨ {smoker_level}\n"
        f"üí™ {worker_level}\n\n"
        f"*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
        f"üé≠ –°—Ç–∏–∫–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats_stickers[user_id]}\n"
        f"üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats_photos[user_id]}\n"
        f"üèÖ –ê—á–∏–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ: {len(achievements_unlocked[user_id])}"
    )
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤ –∏ —Ä–∞–±–æ—Ç—è–≥"""
    if not sessions:
        await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    now_ekt = datetime.utcnow() + timedelta(hours=5)
    week_ago = now_ekt - timedelta(days=7)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤—Å–µ –≤—Ä–µ–º—è)
    response = "üèÜ *–¢–û–ü –£–ß–ê–°–¢–ù–ò–ö–û–í*\n\n"
    
    # –¢–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤ (–≤—Å–µ –≤—Ä–µ–º—è)
    if stats_yes:
        response += "üö¨ *–¢–û–ü –ö–£–†–ò–õ–¨–©–ò–ö–û–í (–≤—Å–µ –≤—Ä–µ–º—è):*\n"
        smoker_top = get_grouped_top(stats_yes, get_smoker_level)
        for place, username, count, level in smoker_top:
            medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(place, "üèÖ")
            response += f"{medal} {username}: {count} —Ä–∞–∑ - {level}\n"
    else:
        response += "üö¨ *–¢–û–ü –ö–£–†–ò–õ–¨–©–ò–ö–û–í:*\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    response += "\n"
    
    # –¢–æ–ø —Ä–∞–±–æ—Ç—è–≥ (–≤—Å–µ –≤—Ä–µ–º—è)
    if stats_no:
        response += "üí™ *–¢–û–ü –†–ê–ë–û–¢–Ø–ì (–≤—Å–µ –≤—Ä–µ–º—è):*\n"
        worker_top = get_grouped_top(stats_no, get_worker_level)
        for place, username, count, level in worker_top:
            medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(place, "üèÖ")
            response += f"{medal} {username}: {count} —Ä–∞–∑ - {level}\n"
    else:
        response += "üí™ *–¢–û–ü –†–ê–ë–û–¢–Ø–ì:*\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    response += "\n"
    
    # –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    weekly_yes = defaultdict(int)
    weekly_no = defaultdict(int)
    
    for t, uid, ans in sessions:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –≤ –ï–ö–ë –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        session_time_ekt = t + timedelta(hours=5)
        if session_time_ekt >= week_ago:
            if ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ":
                weekly_yes[uid] += 1
            elif ans == "–ù–µ—Ç":
                weekly_no[uid] += 1
    
    # –ù–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤
    if weekly_yes:
        response += "üìÖ *–ù–ï–î–ï–õ–¨–ù–´–ô –¢–û–ü –ö–£–†–ò–õ–¨–©–ò–ö–û–í:*\n"
        weekly_smoker_top = get_grouped_top(weekly_yes, get_smoker_level)
        for place, username, count, level in weekly_smoker_top:
            medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(place, "üèÖ")
            response += f"{medal} {username}: {count} —Ä–∞–∑ - {level}\n"
    else:
        response += "üìÖ *–ù–ï–î–ï–õ–¨–ù–´–ô –¢–û–ü –ö–£–†–ò–õ–¨–©–ò–ö–û–í:*\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    response += "\n"
    
    # –ù–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø —Ä–∞–±–æ—Ç—è–≥
    if weekly_no:
        response += "üìÖ *–ù–ï–î–ï–õ–¨–ù–´–ô –¢–û–ü –†–ê–ë–û–¢–Ø–ì:*\n"
        weekly_worker_top = get_grouped_top(weekly_no, get_worker_level)
        for place, username, count, level in weekly_worker_top:
            medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(place, "üèÖ")
            response += f"{medal} {username}: {count} —Ä–∞–∑ - {level}\n"
    else:
        response += "üìÖ *–ù–ï–î–ï–õ–¨–ù–´–ô –¢–û–ü –†–ê–ë–û–¢–Ø–ì:*\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    buf = create_statistics_plot()
    if buf is None:
        await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
        return
    
    await update.message.reply_photo(
        photo=InputFile(buf, filename="statistics.png"),
        caption="üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫—É—Ä–æ–≤*",
        parse_mode='Markdown'
    )

async def my_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.effective_user.id
    buf = create_user_stats_plot(user_id)
    if buf is None:
        await update.message.reply_text("üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
        return
    
    username = usernames.get(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await update.message.reply_photo(
        photo=InputFile(buf, filename="my_statistics.png"),
        caption=f"üìä *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {username}*",
        parse_mode='Markdown'
    )

async def achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞—á–∏–≤–∫–∏"""
    user_id = update.effective_user.id
    user_achievements = achievements_unlocked[user_id]
    username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    
    if not user_achievements:
        await update.message.reply_text("üèÖ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞—á–∏–≤–æ–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å–∞—Ö!")
        return
    
    response = f"üèÖ *–ê—á–∏–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:*\n\n"
    for i, achievement in enumerate(sorted(user_achievements), 1):
        response += f"{i}. {achievement}\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    total_users = len(set(list(stats_yes.keys()) + list(stats_no.keys())))
    total_sessions = len(sessions)
    total_successful = len(successful_polls)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
    now_ekt = datetime.utcnow() + timedelta(hours=5)
    week_ago = now_ekt - timedelta(days=7)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    sessions_week = sum(1 for t, _, _ in sessions if (t + timedelta(hours=5)) >= week_ago)
    successful_week = sum(1 for t in successful_polls if (t + timedelta(hours=5)) >= week_ago)
    
    response = (
        f"üëë *–ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–∫—É—Ä–æ–≤: {total_successful}\n"
        f"‚Ä¢ –°–µ—Å—Å–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {sessions_week}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {successful_week}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å: {'–î–∞' if active_poll_id else '–ù–µ—Ç'}\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö: {os.path.getsize(DATA_FILE) if os.path.exists(DATA_FILE) else 0} –±–∞–π—Ç"
    )
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def reset_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–æ–π —Å–±—Ä–æ—Å –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ª–µ—Ç—É –∏–∑ sessions
    # –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–±—Ä–æ—Å–∞. –ù–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–æ–ø–µ
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
    now_ekt = datetime.utcnow() + timedelta(hours=5)
    
    await update.message.reply_text(
        f"‚úÖ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        f"–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: {now_ekt.strftime('%d.%m.%Y')}\n"
        f"–ù–µ–¥–µ–ª—å–Ω—ã–π —Ç–æ–ø –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        parse_mode='Markdown'
    )

async def friday_rewards(context: ContextTypes.DEFAULT_TYPE):
    """–ü—è—Ç–Ω–∏—á–Ω–æ–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ –Ω–µ–¥–µ–ª—å–Ω–æ–º—É —Ç–æ–ø—É"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
    now_ekt = datetime.utcnow() + timedelta(hours=5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞ (4) –∏ –≤—Ä–µ–º—è –æ–∫–æ–ª–æ 17:00
    if now_ekt.weekday() != 4 or now_ekt.hour < 16:
        return
    
    logger.info("üéâ –ó–∞–ø—É—Å–∫ –ø—è—Ç–Ω–∏—á–Ω–æ–≥–æ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–æ –Ω–µ–¥–µ–ª—å–Ω–æ–º—É —Ç–æ–ø—É")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    week_ago = now_ekt - timedelta(days=7)
    weekly_yes = defaultdict(int)
    weekly_no = defaultdict(int)
    
    for t, uid, ans in sessions:
        session_time_ekt = t + timedelta(hours=5)
        if session_time_ekt >= week_ago:
            if ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ":
                weekly_yes[uid] += 1
            elif ans == "–ù–µ—Ç":
                weekly_no[uid] += 1
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ–¥–µ–ª–∏
    weekly_smoker_top = get_grouped_top(weekly_yes, get_smoker_level)
    weekly_worker_top = get_grouped_top(weekly_no, get_worker_level)
    
    try:
        message = "üéâ *–ü–Ø–¢–ù–ò–ß–ù–û–ï –ù–ê–ì–†–ê–ñ–î–ï–ù–ò–ï!*\n\n"
        message += "–ü–æ –∏—Ç–æ–≥–∞–º —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏—Ö:\n\n"
        
        if weekly_smoker_top:
            message += "üö¨ *–õ—É—á—à–∏–µ –∫—É—Ä–∏–ª—å—â–∏–∫–∏ –Ω–µ–¥–µ–ª–∏:*\n"
            for place, username, count, level in weekly_smoker_top[:3]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞
                medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(place, "üèÖ")
                message += f"{medal} {username} - {count} —Ä–∞–∑\n"
        else:
            message += "üö¨ *–õ—É—á—à–∏–µ –∫—É—Ä–∏–ª—å—â–∏–∫–∏ –Ω–µ–¥–µ–ª–∏:*\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        message += "\n"
        
        if weekly_worker_top:
            message += "üí™ *–õ—É—á—à–∏–µ —Ä–∞–±–æ—Ç—è–≥–∏ –Ω–µ–¥–µ–ª–∏:*\n"
            for place, username, count, level in weekly_worker_top[:3]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞
                medal = {1: "ü•á", 2: "ü•à", 3: "ü•â"}.get(place, "üèÖ")
                message += f"{medal} {username} - {count} —Ä–∞–∑\n"
        else:
            message += "üí™ *–õ—É—á—à–∏–µ —Ä–∞–±–æ—Ç—è–≥–∏ –Ω–µ–¥–µ–ª–∏:*\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        message += "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π! üéä\n–•–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö! üòä"
        
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=message,
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ –ü—è—Ç–Ω–∏—á–Ω–æ–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—è—Ç–Ω–∏—á–Ω–æ–≥–æ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è: {e}")

async def daily_content_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –¥–Ω—è –≤ 9:30"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
    now_ekt = datetime.utcnow() + timedelta(hours=5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
    if now_ekt.weekday() >= 5 or now_ekt.hour != 9 or now_ekt.minute != 30:
        return
    
    logger.info("üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –¥–Ω—è")
    
    try:
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text="üé≠ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n"
                 "–°–µ–≥–æ–¥–Ω—è –≤ 10:00 –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω *–∞–Ω–æ–Ω–∏–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è*!\n\n"
                 "–ï—Å–ª–∏ —Ç—ã –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –∞–≤—Ç–æ—Ä–æ–º - –Ω–µ –∑–∞–±—É–¥—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç!",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    load_data()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("top", top))
    application.add_handler(CommandHandler("graph", graph))
    application.add_handler(CommandHandler("my_graph", my_graph))
    application.add_handler(CommandHandler("achievements", achievements))
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("reset_week", reset_week))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Regex("^–ö—É—Ä–∏—Ç—å üö¨$"), handle_button))
    
    # –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –§–ò–õ–¨–¢–† –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT | filters.PHOTO | filters.VIDEO | filters.AUDIO | 
        filters.Document.ALL | filters.ANIMATION | filters.VOICE | filters.Sticker.ALL, 
        handle_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø—Ä–æ—Å–æ–≤
    application.add_handler(PollAnswerHandler(handle_poll_answer))
    application.add_handler(MessageHandler(filters.POLL, handle_poll_update))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    job_queue = application.job_queue
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ 00:01 –ï–ö–ë (19:01 UTC)
    job_queue.run_daily(
        lambda context: reset_daily_content(),
        time=time(hour=19, minute=1, second=0),  # 00:01 –ï–ö–ë
        days=(0, 1, 2, 3, 4, 5, 6)
    )
    
    # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ 9:00 –ï–ö–ë (4:00 UTC)
    job_queue.run_daily(
        lambda context: application.create_task(ask_for_content(context)),
        time=time(hour=4, minute=0, second=0),  # 9:00 –ï–ö–ë
        days=(0, 1, 2, 3, 4)  # –ü–Ω-–ü—Ç
    )
    
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –≤ 9:30 –ï–ö–ë (4:30 UTC)
    job_queue.run_daily(
        lambda context: application.create_task(daily_content_reminder(context)),
        time=time(hour=4, minute=30, second=0),  # 9:30 –ï–ö–ë
        days=(0, 1, 2, 3, 4)  # –ü–Ω-–ü—Ç
    )
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ 10:00 –ï–ö–ë (5:00 UTC)
    job_queue.run_daily(
        lambda context: application.create_task(publish_daily_content(context)),
        time=time(hour=5, minute=0, second=0),  # 10:00 –ï–ö–ë
        days=(0, 1, 2, 3, 4)  # –ü–Ω-–ü—Ç
    )
    
    # –ü—è—Ç–Ω–∏—á–Ω–æ–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ 17:00 –ï–ö–ë (12:00 UTC)
    job_queue.run_daily(
        lambda context: application.create_task(friday_rewards(context)),
        time=time(hour=12, minute=0, second=0),  # 17:00 –ï–ö–ë
        days=(4,)  # –¢–æ–ª—å–∫–æ –ø—è—Ç–Ω–∏—Ü–∞
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue.run_repeating(
        lambda context: save_data(),
        interval=300,
        first=10
    )
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    main()
