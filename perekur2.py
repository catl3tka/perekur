import logging
import json
import os
from collections import defaultdict, Counter
from datetime import datetime, timedelta, time
import io
import random
import matplotlib.pyplot as plt
import numpy as np

from telegram import Update, ReplyKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    MessageHandler, filters, PollAnswerHandler
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = -1003072750672
ADMIN_ID = 284884293
DATA_FILE = "bot_data.json"
BACKUP_FILE = "bot_data_backup.json"
POLL_DURATION = 600  # 10 –º–∏–Ω—É—Ç
COOLDOWN = timedelta(minutes=15)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É—Ä–æ–≤–Ω–µ–π (–¥–æ 1000 –æ—Ç–≤–µ—Ç–æ–≤)
SMOKER_LEVELS = {
    0: "–ö—É—Ä–∏–ª—å—â–∏–∫ 0 lvl",
    10: "–ö—É—Ä–∏–ª—å—â–∏–∫ 1 lvl", 
    20: "–ö—É—Ä–∏–ª—å—â–∏–∫ 2 lvl",
    30: "–ö—É—Ä–∏–ª—å—â–∏–∫ 3 lvl",
    40: "–ö—É—Ä–∏–ª—å—â–∏–∫ 4 lvl",
    50: "–ö—É—Ä–∏–ª—å—â–∏–∫ 5 lvl",
    60: "–ö—É—Ä–∏–ª—å—â–∏–∫ 6 lvl",
    70: "–ö—É—Ä–∏–ª—å—â–∏–∫ 7 lvl",
    80: "–ö—É—Ä–∏–ª—å—â–∏–∫ 8 lvl",
    90: "–ö—É—Ä–∏–ª—å—â–∏–∫ 9 lvl",
    100: "–ö—É—Ä–∏–ª—å—â–∏–∫ 10 lvl",
    150: "–ö—É—Ä–∏–ª—å—â–∏–∫ 15 lvl",
    200: "–ö—É—Ä–∏–ª—å—â–∏–∫ 20 lvl",
    250: "–ö—É—Ä–∏–ª—å—â–∏–∫ 25 lvl",
    300: "–ö—É—Ä–∏–ª—å—â–∏–∫ 30 lvl",
    350: "–ö—É—Ä–∏–ª—å—â–∏–∫ 35 lvl",
    400: "–ö—É—Ä–∏–ª—å—â–∏–∫ 40 lvl",
    450: "–ö—É—Ä–∏–ª—å—â–∏–∫ 45 lvl",
    500: "–ö—É—Ä–∏–ª—å—â–∏–∫ 50 lvl",
    550: "–ö—É—Ä–∏–ª—å—â–∏–∫ 55 lvl",
    600: "–ö—É—Ä–∏–ª—å—â–∏–∫ 60 lvl",
    650: "–ö—É—Ä–∏–ª—å—â–∏–∫ 65 lvl",
    700: "–ö—É—Ä–∏–ª—å—â–∏–∫ 70 lvl",
    750: "–ö—É—Ä–∏–ª—å—â–∏–∫ 75 lvl",
    800: "–ö—É—Ä–∏–ª—å—â–∏–∫ 80 lvl",
    850: "–ö—É—Ä–∏–ª—å—â–∏–∫ 85 lvl",
    900: "–ö—É—Ä–∏–ª—å—â–∏–∫ 90 lvl",
    950: "–ö—É—Ä–∏–ª—å—â–∏–∫ 95 lvl",
    1000: "–ö—É—Ä–∏–ª—å—â–∏–∫ MAX lvl"
}

WORKER_LEVELS = {
    0: "–†–∞–±–æ—Ç—è–≥–∞ 0 lvl",
    10: "–†–∞–±–æ—Ç—è–≥–∞ 1 lvl",
    20: "–†–∞–±–æ—Ç—è–≥–∞ 2 lvl", 
    30: "–†–∞–±–æ—Ç—è–≥–∞ 3 lvl",
    40: "–†–∞–±–æ—Ç—è–≥–∞ 4 lvl",
    50: "–†–∞–±–æ—Ç—è–≥–∞ 5 lvl",
    60: "–†–∞–±–æ—Ç—è–≥–∞ 6 lvl",
    70: "–†–∞–±–æ—Ç—è–≥–∞ 7 lvl",
    80: "–†–∞–±–æ—Ç—è–≥–∞ 8 lvl",
    90: "–†–∞–±–æ—Ç—è–≥–∞ 9 lvl",
    100: "–†–∞–±–æ—Ç—è–≥–∞ 10 lvl",
    150: "–†–∞–±–æ—Ç—è–≥–∞ 15 lvl",
    200: "–†–∞–±–æ—Ç—è–≥–∞ 20 lvl",
    250: "–†–∞–±–æ—Ç—è–≥–∞ 25 lvl",
    300: "–†–∞–±–æ—Ç—è–≥–∞ 30 lvl",
    350: "–†–∞–±–æ—Ç—è–≥–∞ 35 lvl",
    400: "–†–∞–±–æ—Ç—è–≥–∞ 40 lvl",
    450: "–†–∞–±–æ—Ç—è–≥–∞ 45 lvl",
    500: "–†–∞–±–æ—Ç—è–≥–∞ 50 lvl",
    550: "–†–∞–±–æ—Ç—è–≥–∞ 55 lvl",
    600: "–†–∞–±–æ—Ç—è–≥–∞ 60 lvl",
    650: "–†–∞–±–æ—Ç—è–≥–∞ 65 lvl",
    700: "–†–∞–±–æ—Ç—è–≥–∞ 70 lvl",
    750: "–†–∞–±–æ—Ç—è–≥–∞ 75 lvl",
    800: "–†–∞–±–æ—Ç—è–≥–∞ 80 lvl",
    850: "–†–∞–±–æ—Ç—è–≥–∞ 85 lvl",
    900: "–†–∞–±–æ—Ç—è–≥–∞ 90 lvl",
    950: "–†–∞–±–æ—Ç—è–≥–∞ 95 lvl",
    1000: "–†–∞–±–æ—Ç—è–≥–∞ MAX lvl"
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞—á–∏–≤–æ–∫
ACHIEVEMENT_STICKERS_20 = 20
ACHIEVEMENT_PHOTOS_20 = 20
CONSECUTIVE_THRESHOLD = 5

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[logging.FileHandler("bot.log", encoding="utf-8"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# --- –ö–Ω–æ–ø–∫–∏ ---
main_keyboard = [["–ö—É—Ä–∏—Ç—å üö¨"]]
reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
active_poll_id = None
active_poll_options = []
poll_votes = {}  # –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–ø—Ä–æ—Å–µ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
stats_yes = defaultdict(int)
stats_no = defaultdict(int)
stats_stickers = defaultdict(int)
stats_photos = defaultdict(int)
usernames = {}
sessions = []  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞)
last_poll_time = None
consecutive_yes = defaultdict(int)
consecutive_no = defaultdict(int)
consecutive_button_press = defaultdict(int)
last_button_press_time = defaultdict(lambda: datetime.min)
achievements_unlocked = defaultdict(set)
successful_polls = []  # –£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–∫—É—Ä—ã (–æ–ø—Ä–æ—Å—ã —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –≥–æ–ª–æ—Å–æ–º)
user_levels = defaultdict(dict)  # {user_id: {"smoker_level": int, "worker_level": int}}

# --- –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–ê –î–ù–Ø ---
content_submissions = {}  # {user_id: {"message": message, "date": datetime}}
asked_today = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
current_content_author = None  # –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
def setup_plot_style():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    plt.style.use('seaborn-v0_8')
    plt.rcParams['font.family'] = 'DejaVu Sans'
    plt.rcParams['axes.facecolor'] = '#f8f9fa'
    plt.rcParams['figure.facecolor'] = '#ffffff'

def create_user_stats_plot(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    setup_plot_style()
    
    user_sessions = [(t, ans) for t, uid, ans in sessions if uid == user_id]
    if not user_sessions:
        return None
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    username = usernames.get(user_id, f"User{user_id}")
    fig.suptitle(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}', fontsize=14, fontweight='bold')
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers = Counter(ans for _, ans in user_sessions)
    colors = ['#28a745', '#dc3545']  # –¢–æ–ª—å–∫–æ –î–∞ –∏ –ù–µ—Ç
    axes[0, 0].pie(user_answers.values(), labels=user_answers.keys(), autopct='%1.1f%%',
                   colors=colors[:len(user_answers)], startangle=90)
    axes[0, 0].set_title('–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã')
    
    # 2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    day_count = [0] * 7
    for t, _ in user_sessions:
        day_count[t.weekday()] += 1
    
    axes[0, 1].bar(days, day_count, color='#007bff', alpha=0.7)
    axes[0, 1].set_title('–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏')
    axes[0, 1].set_ylabel('–ì–æ–ª–æ—Å–æ–≤')
    axes[0, 1].grid(True, alpha=0.3)
    
    # 3. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º (7:00-17:00)
    work_periods = ['7-8', '8-9', '9-10', '10-11', '11-12', '12-13', '13-14', '14-15', '15-16', '16-17']
    period_count = [0] * 10
    
    for t, _ in user_sessions:
        hour = t.hour
        # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å 7:00 –¥–æ 17:00
        if 7 <= hour < 17:
            period_index = hour - 7
            period_count[period_index] += 1
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    active_periods = []
    active_counts = []
    for i, count in enumerate(period_count):
        if count > 0:
            active_periods.append(work_periods[i])
            active_counts.append(count)
    
    if active_counts:
        axes[1, 0].bar(active_periods, active_counts, color='#20c997', alpha=0.7)
        axes[1, 0].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º')
        axes[1, 0].set_ylabel('–ì–æ–ª–æ—Å–æ–≤')
        axes[1, 0].grid(True, alpha=0.3)
        plt.setp(axes[1, 0].xaxis.get_majorticklabels(), rotation=45)
    else:
        axes[1, 0].text(0.5, 0.5, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n–≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã', 
                       ha='center', va='center', transform=axes[1, 0].transAxes)
        axes[1, 0].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º')
    
    # 4. –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    today = datetime.now().date()
    last_week = [today - timedelta(days=i) for i in range(6, -1, -1)]
    week_dates = [d.strftime('%d.%m') for d in last_week]
    week_count = [0] * 7
    
    for t, _ in user_sessions:
        session_date = t.date()
        for i, date_obj in enumerate(last_week):
            if session_date == date_obj:
                week_count[i] += 1
                break
    
    axes[1, 1].plot(week_dates, week_count, marker='o', linewidth=2, color='#dc3545')
    axes[1, 1].fill_between(week_dates, week_count, alpha=0.3, color='#dc3545')
    axes[1, 1].set_title('–ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é')
    axes[1, 1].set_ylabel('–ì–æ–ª–æ—Å–æ–≤ –≤ –¥–µ–Ω—å')
    axes[1, 1].grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    
    plt.tight_layout()
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

def create_statistics_plot():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    setup_plot_style()
    
    if not sessions:
        return None
    
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫—É—Ä–æ–≤', fontsize=16, fontweight='bold')
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    answers_count = {
        '–î–∞, –∫–æ–Ω–µ—á–Ω–æ': sum(1 for _, _, ans in sessions if ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ"),
        '–ù–µ—Ç': sum(1 for _, _, ans in sessions if ans == "–ù–µ—Ç")
    }
    
    colors = ['#28a745', '#dc3545']  # –¢–æ–ª—å–∫–æ –î–∞ –∏ –ù–µ—Ç
    axes[0, 0].pie(answers_count.values(), labels=answers_count.keys(), autopct='%1.1f%%', 
                   colors=colors, startangle=90)
    axes[0, 0].set_title('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤')
    
    # 2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    day_count = [0] * 7
    for t, _, _ in sessions:
        day_count[t.weekday()] += 1
    
    axes[0, 1].bar(days, day_count, color='#007bff', alpha=0.7)
    axes[0, 1].set_title('üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
    axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤')
    axes[0, 1].grid(True, alpha=0.3)
    
    # 3. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º (7:00-17:00)
    work_periods = ['7-8', '8-9', '9-10', '10-11', '11-12', '12-13', '13-14', '14-15', '15-16', '16-17']
    period_count = [0] * 10
    
    for t, _, _ in sessions:
        hour = t.hour
        # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã —Å 7:00 –¥–æ 17:00
        if 7 <= hour < 17:
            period_index = hour - 7
            period_count[period_index] += 1
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥—ã —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    active_periods = []
    active_counts = []
    for i, count in enumerate(period_count):
        if count > 0:
            active_periods.append(work_periods[i])
            active_counts.append(count)
    
    if active_counts:
        axes[1, 0].bar(active_periods, active_counts, color='#20c997', alpha=0.7)
        axes[1, 0].set_title('üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º')
        axes[1, 0].set_xlabel('–ß–∞—Å–æ–≤—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏')
        axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤')
        axes[1, 0].grid(True, alpha=0.3)
        plt.setp(axes[1, 0].xaxis.get_majorticklabels(), rotation=45)
    else:
        axes[1, 0].text(0.5, 0.5, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n–≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã', 
                       ha='center', va='center', transform=axes[1, 0].transAxes)
        axes[1, 0].set_title('üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º')
    
    # 4. –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_yes = defaultdict(int)
    for _, uid, ans in sessions:
        if ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ":
            user_yes[uid] += 1
    
    if user_yes:
        top_users = sorted(user_yes.items(), key=lambda x: x[1], reverse=True)[:8]
        user_names = [usernames.get(uid, f"User{uid}")[:15] for uid, _ in top_users]
        user_counts = [count for _, count in top_users]
        
        y_pos = np.arange(len(user_names))
        axes[1, 1].barh(y_pos, user_counts, color='#fd7e14', alpha=0.7)
        axes[1, 1].set_yticks(y_pos)
        axes[1, 1].set_yticklabels(user_names)
        axes[1, 1].set_title('üèÜ –¢–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤')
        axes[1, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–î–∞"')
    
    plt.tight_layout()
    
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return buf

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ ---
def create_backup():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as source:
                data = source.read()
            with open(BACKUP_FILE, 'w', encoding='utf-8') as target:
                target.write(data)
            logger.info("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")

def save_data():
    create_backup()
    data = {
        "stats_yes": dict(stats_yes),
        "stats_no": dict(stats_no),
        "stats_stickers": dict(stats_stickers),
        "stats_photos": dict(stats_photos),
        "usernames": usernames,
        "sessions": [(t.isoformat(), uid, ans) for t, uid, ans in sessions],
        "consecutive_yes": dict(consecutive_yes),
        "consecutive_no": dict(consecutive_no),
        "consecutive_button_press": dict(consecutive_button_press),
        "last_button_press_time": {str(k): v.isoformat() for k, v in last_button_press_time.items()},
        "achievements_unlocked": {str(uid): list(achs) for uid, achs in achievements_unlocked.items()},
        "successful_polls": [t.isoformat() for t in successful_polls],
        "user_levels": {str(uid): levels for uid, levels in user_levels.items()},
        # –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ asked_today, content_submissions –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        "asked_today": list(asked_today),
    }
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def load_data():
    global stats_yes, stats_no, stats_stickers, stats_photos
    global usernames, sessions, consecutive_yes, consecutive_no, consecutive_button_press
    global last_button_press_time, achievements_unlocked, successful_polls, user_levels
    global asked_today
    
    if not os.path.exists(DATA_FILE):
        logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
        return
    
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        stats_yes.update(data.get("stats_yes", {}))
        stats_no.update(data.get("stats_no", {}))
        stats_stickers.update(data.get("stats_stickers", {}))
        stats_photos.update(data.get("stats_photos", {}))
        usernames.update(data.get("usernames", {}))
        sessions.extend([(datetime.fromisoformat(t), uid, ans) for t, uid, ans in data.get("sessions", [])])
        consecutive_yes.update(data.get("consecutive_yes", {}))
        consecutive_no.update(data.get("consecutive_no", {}))
        consecutive_button_press.update(data.get("consecutive_button_press", {}))
        successful_polls.extend([datetime.fromisoformat(t) for t in data.get("successful_polls", [])])
        user_levels.update({int(uid): levels for uid, levels in data.get("user_levels", {}).items()})
        
        # –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–ê: –∑–∞–≥—Ä—É–∂–∞–µ–º asked_today
        asked_today.update(data.get("asked_today", []))
        
        last_button_press_time_data = data.get("last_button_press_time", {})
        for k, v in last_button_press_time_data.items():
            try:
                last_button_press_time[int(k)] = datetime.fromisoformat(v)
            except (ValueError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {k}: {e}")
        
        for uid, achs in data.get("achievements_unlocked", {}).items():
            try:
                achievements_unlocked[int(uid)].update(achs)
            except (ValueError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—á–∏–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –í—ã–¥–∞—á–∞ –∞—á–∏–≤–æ–∫ ---
async def give_achievement(user_id: int, context: ContextTypes.DEFAULT_TYPE, achievement_name: str):
    if achievement_name not in achievements_unlocked[user_id]:
        achievements_unlocked[user_id].add(achievement_name)
        save_data()
        
        try:
            await context.bot.send_message(chat_id=user_id, text=f"üèÖ –ê—á–∏–≤–∫–∞: {achievement_name}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—á–∏–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        try:
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=f"üéâ {username} –ø–æ–ª—É—á–∏–ª(–∞) –∞—á–∏–≤–∫—É: {achievement_name}!")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

# --- –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π ---
def get_smoker_level(yes_count: int) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏–ª—å—â–∏–∫–∞ –∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä–æ–≥"""
    level_thresholds = sorted(SMOKER_LEVELS.keys(), reverse=True)
    for threshold in level_thresholds:
        if yes_count >= threshold:
            return SMOKER_LEVELS[threshold], threshold
    return SMOKER_LEVELS[0], 0

def get_worker_level(no_count: int) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Ä–∞–±–æ—Ç—è–≥–∏ –∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä–æ–≥"""
    level_thresholds = sorted(WORKER_LEVELS.keys(), reverse=True)
    for threshold in level_thresholds:
        if no_count >= threshold:
            return WORKER_LEVELS[threshold], threshold
    return WORKER_LEVELS[0], 0

async def check_level_up(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    yes_count = stats_yes[user_id]
    no_count = stats_no[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏ –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
    current_smoker_level = user_levels[user_id].get("smoker_level", 0)
    current_worker_level = user_levels[user_id].get("worker_level", 0)
    
    new_smoker_level, smoker_threshold = get_smoker_level(yes_count)
    new_worker_level, worker_threshold = get_worker_level(no_count)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫—É—Ä–∏–ª—å—â–∏–∫–∞
    if smoker_threshold > current_smoker_level:
        user_levels[user_id]["smoker_level"] = smoker_threshold
        username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
        try:
            await context.bot.send_message(
                chat_id=user_id, 
                text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: {new_smoker_level}!"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"üö¨ {username} –ø–æ–≤—ã—Å–∏–ª(–∞) —É—Ä–æ–≤–µ–Ω—å –¥–æ {new_smoker_level}! üéâ"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏–ª—å—â–∏–∫–∞ –¥–æ {new_smoker_level}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∞–±–æ—Ç—è–≥–∏
    if worker_threshold > current_worker_level:
        user_levels[user_id]["worker_level"] = worker_threshold
        username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
        try:
            await context.bot.send_message(
                chat_id=user_id, 
                text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: {new_worker_level}!"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"üí™ {username} –ø–æ–≤—ã—Å–∏–ª(–∞) —É—Ä–æ–≤–µ–Ω—å –¥–æ {new_worker_level}! üéâ"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å —Ä–∞–±–æ—Ç—è–≥–∏ –¥–æ {new_worker_level}")
    
    save_data()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—á–∏–≤–æ–∫ ---
async def check_achievements(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    week_ago = now - timedelta(days=7)
    
    yes_week = sum(1 for t, uid, ans in sessions if uid == user_id and ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ" and t >= week_ago)
    no_week = sum(1 for t, uid, ans in sessions if uid == user_id and ans == "–ù–µ—Ç" and t >= week_ago)

    if consecutive_yes[user_id] >= CONSECUTIVE_THRESHOLD:
        await give_achievement(user_id, context, "–°–µ—Ä–∏–π–Ω—ã–π –∫—É—Ä–∏–ª—å—â–∏–∫")
    if consecutive_no[user_id] >= CONSECUTIVE_THRESHOLD:
        await give_achievement(user_id, context, "–°–µ—Ä–∏–π–Ω—ã–π –ó–û–ñ–Ω–∏–∫")

    h = now.hour
    if consecutive_yes[user_id] >= 1:
        if 0 <= h <= 7:
            await give_achievement(user_id, context, "–†–∞–Ω–Ω–∏–π –ø–µ—Ä–µ–∫—É—Ä")
        elif 17 <= h <= 23:
            await give_achievement(user_id, context, "–ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞")

    if stats_stickers[user_id] >= ACHIEVEMENT_STICKERS_20:
        await give_achievement(user_id, context, "–°—Ç–∏–∫–µ—Ä–æ(WO)MAN")
    if stats_photos[user_id] >= ACHIEVEMENT_PHOTOS_20:
        await give_achievement(user_id, context, "–ú–µ–º–æ–ª–æ–≥")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
    await check_level_up(user_id, context)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–æ–ø–æ–≤ ---
def get_grouped_top(stats_dict, level_func):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ø —Å —É—á–µ—Ç–æ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞)"""
    if not stats_dict:
        return []
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    sorted_stats = sorted(stats_dict.items(), key=lambda x: x[1], reverse=True)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
    groups = []
    current_group = []
    current_value = None
    
    for user_id, count in sorted_stats:
        if count != current_value:
            if current_group:
                groups.append(current_group)
            current_value = count
            current_group = [(user_id, count)]
        else:
            current_group.append((user_id, count))
    
    if current_group:
        groups.append(current_group)
    
    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ—Å—Ç–∞ (1, 2, 3) –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
    result = []
    
    for place, group in enumerate(groups, 1):
        if place > 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–º—è –º–µ—Å—Ç–∞–º–∏
            break
            
        # –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–ª—É—á–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –º–µ—Å—Ç–æ
        for user_id, count in group:
            username = usernames.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            level_name, _ = level_func(count)
            result.append((place, username, count, level_name))
    
    return result

# --- –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–ê –î–ù–Ø ---
def get_active_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
    week_ago = datetime.now() - timedelta(days=7)
    active_users = set()
    
    for t, uid, _ in sessions:
        if t >= week_ago:
            active_users.add(uid)
    
    return list(active_users)

def reset_daily_content():
    """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    global asked_today, content_submissions, current_content_author
    asked_today.clear()
    content_submissions.clear()
    current_content_author = None
    logger.info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–æ")

async def ask_for_content(context: ContextTypes.DEFAULT_TYPE, user_id: int = None):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global current_content_author
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (–ü–Ω-–ü—Ç)
    today = datetime.now()
    if today.weekday() >= 5:  # 5=–°–±, 6=–í—Å
        logger.info("üìÖ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ
    if user_id is None:
        active_users = get_active_users()
        if not active_users:
            logger.info("üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
        available_users = [uid for uid in active_users if uid not in asked_today]
        if not available_users:
            logger.info("üìù –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –±—ã–ª–∏ –æ–ø—Ä–æ—à–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è")
            return
        
        user_id = random.choice(available_users)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
    current_content_author = user_id
    asked_today.add(user_id)
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="üé≠ *–ü—Ä–∏–≤–µ—Ç! –¢—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫!*\n\n"
                 "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è *–∞–Ω–æ–Ω–∏–º–Ω–æ–π* –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –æ–±—â–µ–º —á–∞—Ç–µ:\n"
                 "‚Ä¢ üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∞/–º–µ–º\n"
                 "‚Ä¢ üé¨ –í–∏–¥–µ–æ/GIF\n" 
                 "‚Ä¢ üéµ –ú—É–∑—ã–∫–∞/–∞—É–¥–∏–æ\n"
                 "‚Ä¢ üìù –¢–µ–∫—Å—Ç (–∞–Ω–µ–∫–¥–æ—Ç, —à—É—Ç–∫–∞, —Ñ–∞–∫—Ç)\n"
                 "‚Ä¢ üìé –§–∞–π–ª\n\n"
                 "–Ø –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª—é —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø—É *–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞*.\n\n"
                 "–ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ 10:00 ‚è∞",
            parse_mode='Markdown'
        )
        
        logger.info(f"üì® –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ask_for_content(context)

async def handle_content_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if user_id not in asked_today:
        return
    
    today = datetime.now().date()
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        content_submissions[user_id] = {
            "message": message,
            "date": datetime.now()
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
        content_type = "—Ç–µ–∫—Å—Ç"
        if message.photo:
            content_type = "–∫–∞—Ä—Ç–∏–Ω–∫–∞"
        elif message.video:
            content_type = "–≤–∏–¥–µ–æ" 
        elif message.audio:
            content_type = "–∞—É–¥–∏–æ"
        elif message.document:
            content_type = "—Ñ–∞–π–ª"
        elif message.animation:
            content_type = "GIF"
        elif message.sticker:
            content_type = "—Å—Ç–∏–∫–µ—Ä"
        elif message.voice:
            content_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        await message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π {content_type} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
            f"–û–Ω –±—É–¥–µ—Ç *–∞–Ω–æ–Ω–∏–º–Ω–æ* –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –æ–±—â–µ–º —á–∞—Ç–µ —Å–µ–≥–æ–¥–Ω—è –≤ 10:00 üïô\n\n"
            f"_–ù–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –±—ã–ª —Ç—ã_ üòâ",
            parse_mode='Markdown'
        )
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø–∞ '{content_type}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

async def publish_daily_content(context: ContextTypes.DEFAULT_TYPE):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ 10:00"""
    today = datetime.now().date()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    if datetime.now().weekday() >= 5:
        return
    
    # –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    content_to_publish = None
    author_id = None
    
    for user_id, submission in content_submissions.items():
        if submission["date"].date() == today:
            content_to_publish = submission["message"]
            author_id = user_id
            break
    
    if content_to_publish and author_id:
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞)
            await forward_message_to_group(context, content_to_publish)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del content_submissions[author_id]
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {author_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    else:
        logger.info("üì≠ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def forward_message_to_group(context: ContextTypes.DEFAULT_TYPE, message):
    """–ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∞–Ω–æ–Ω–∏–º–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        content_type = "–ö–æ–Ω—Ç–µ–Ω—Ç"
        if message.photo:
            content_type = "–ú–µ–º –¥–Ω—è" 
        elif message.video:
            content_type = "–í–∏–¥–µ–æ –¥–Ω—è"
        elif message.audio:
            content_type = "–ú—É–∑—ã–∫–∞ –¥–Ω—è"
        elif message.text:
            content_type = "–ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è"
        elif message.document:
            content_type = "–§–∞–π–ª –¥–Ω—è"
        elif message.animation:
            content_type = "GIF –¥–Ω—è"
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"üé≠ *{content_type}!*\n\n_–ü—Ä–∏—Å–ª–∞–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ_ üëª",
            parse_mode='Markdown'
        )
        
        # –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if message.text:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=message.text
            )
        elif message.photo:
            await context.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo=message.photo[-1].file_id,
                caption=message.caption
            )
        elif message.video:
            await context.bot.send_video(
                chat_id=GROUP_CHAT_ID,
                video=message.video.file_id,
                caption=message.caption
            )
        elif message.audio:
            await context.bot.send_audio(
                chat_id=GROUP_CHAT_ID,
                audio=message.audio.file_id,
                caption=message.caption
            )
        elif message.document:
            await context.bot.send_document(
                chat_id=GROUP_CHAT_ID,
                document=message.document.file_id,
                caption=message.caption
            )
        elif message.animation:  # GIF
            await context.bot.send_animation(
                chat_id=GROUP_CHAT_ID,
                animation=message.animation.file_id,
                caption=message.caption
            )
        elif message.voice:
            await context.bot.send_voice(
                chat_id=GROUP_CHAT_ID,
                voice=message.voice.file_id
            )
        elif message.sticker:
            await context.bot.send_sticker(
                chat_id=GROUP_CHAT_ID,
                sticker=message.sticker.file_id
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise e

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò: –¢–æ–ø —Ä–∞–±–æ—Ç—è–≥ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ ---
async def show_workers_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø —Ä–∞–±–æ—Ç—è–≥ –ø–æ –æ—Ç–≤–µ—Ç–∞–º '–ù–µ—Ç'"""
    grouped_top = get_grouped_top(dict(stats_no), get_worker_level)
    
    if not grouped_top:
        await update.message.reply_text("–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª üö≠")
        return
    
    top_list = []
    for place, username, count, level in grouped_top:
        top_list.append(f"{place}. {username} ‚Äî {count} ({level})")
    
    await update.message.reply_text("üí™ –¢–æ–ø —Ä–∞–±–æ—Ç—è–≥:\n\n" + "\n".join(top_list))

async def get_weekly_winners():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –º–µ—Å—Ç–∞–º"""
    week_ago = datetime.now() - timedelta(days=7)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
    weekly_yes = defaultdict(int)
    weekly_no = defaultdict(int)
    
    for t, uid, ans in sessions:
        if t >= week_ago:
            if ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ":
                weekly_yes[uid] += 1
            elif ans == "–ù–µ—Ç":
                weekly_no[uid] += 1
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞)
    top_smokers_grouped = get_grouped_top(dict(weekly_yes), get_smoker_level)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–ø —Ä–∞–±–æ—Ç—è–≥ –∑–∞ –Ω–µ–¥–µ–ª—é (–ø–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞)
    top_workers_grouped = get_grouped_top(dict(weekly_no), get_worker_level)
    
    return top_smokers_grouped, top_workers_grouped

async def weekly_summary(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –º–µ—Å—Ç–∞–º"""
    logger.info("üéâ –§—É–Ω–∫—Ü–∏—è weekly_summary –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!")
    
    try:
        top_smokers, top_workers = await get_weekly_winners()
        
        message = "üéâ *–ü–Ø–¢–ù–ò–¶–ê! –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏!* üéâ\n\n"
        
        if top_smokers:
            message += "üèÜ *–¢–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏:*\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—Ç–∞–º –¥–ª—è –≤—ã–≤–æ–¥–∞
            current_place = None
            current_winners = []
            
            for place, username, count, level in top_smokers:
                if place != current_place:
                    if current_winners:
                        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É
                        if len(current_winners) == 1:
                            medal = "ü•á" if current_place == 1 else "ü•à" if current_place == 2 else "ü•â"
                            message += f"{medal} {current_winners[0]}\n"
                        else:
                            medal = "ü•á" if current_place == 1 else "ü•à" if current_place == 2 else "ü•â"
                            winners_text = ", ".join(current_winners)
                            message += f"{medal} {winners_text}\n"
                    
                    current_place = place
                    current_winners = [f"{username} ‚Äî {count} —Ä–∞–∑ ({level})"]
                else:
                    current_winners.append(f"{username} ‚Äî {count} —Ä–∞–∑ ({level})")
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
            if current_winners:
                if len(current_winners) == 1:
                    medal = "ü•á" if current_place == 1 else "ü•à" if current_place == 2 else "ü•â"
                    message += f"{medal} {current_winners[0]}\n"
                else:
                    medal = "ü•á" if current_place == 1 else "ü•à" if current_place == 2 else "ü•â"
                    winners_text = ", ".join(current_winners)
                    message += f"{medal} {winners_text}\n"
            
            message += "\n"
        else:
            message += "üö≠ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–∏–∫—Ç–æ –Ω–µ –∫—É—Ä–∏–ª\n\n"
        
        if top_workers:
            message += "üí™ *–¢–æ–ø —Ä–∞–±–æ—Ç—è–≥ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏:*\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—Ç–∞–º –¥–ª—è –≤—ã–≤–æ–¥–∞
            current_place = None
            current_winners = []
            
            for place, username, count, level in top_workers:
                if place != current_place:
                    if current_winners:
                        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É
                        if len(current_winners) == 1:
                            medal = "ü•á" if current_place == 1 else "ü•à" if current_place == 2 else "ü•â"
                            message += f"{medal} {current_winners[0]}\n"
                        else:
                            medal = "ü•á" if current_place == 1 else "ü•à" if current_place == 2 else "ü•â"
                            winners_text = ", ".join(current_winners)
                            message += f"{medal} {winners_text}\n"
                    
                    current_place = place
                    current_winners = [f"{username} ‚Äî {count} —Ä–∞–∑ ({level})"]
                else:
                    current_winners.append(f"{username} ‚Äî {count} —Ä–∞–∑ ({level})")
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
            if current_winners:
                if len(current_winners) == 1:
                    medal = "ü•á" if current_place == 1 else "ü•à" if current_place == 2 else "ü•â"
                    message += f"{medal} {current_winners[0]}\n"
                else:
                    medal = "ü•á" if current_place == 1 else "ü•à" if current_place == 2 else "ü•â"
                    winners_text = ", ".join(current_winners)
                    message += f"{medal} {winners_text}\n"
        else:
            message += "üíº –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        week_sessions = [s for s in sessions if s[0] >= week_ago]
        week_polls = [p for p in successful_polls if p >= week_ago]
        
        message += f"\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:*\n"
        message += f"‚Ä¢ –ü–µ—Ä–µ–∫—É—Ä–æ–≤: {len(week_polls)}\n"
        message += f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤: {len(week_sessions)}\n"
        
        message += "\n–•–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö! üòä"
        
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=message,
            parse_mode='Markdown'
        )
        
        logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤: {e}")

def schedule_weekly_summary(application):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤"""
    job_queue = application.job_queue
    
    if job_queue is None:
        logger.error("‚ùå Job queue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 16:45
    job_queue.run_daily(
        weekly_summary,
        time=time(hour=16, minute=45),
        days=(4,),  # 4 = –ø—è—Ç–Ω–∏—Ü–∞ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
        name="weekly_summary"
    )
    
    logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É 16:45")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    jobs = job_queue.jobs()
    logger.info(f"üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {len(jobs)}")
    for job in jobs:
        logger.info(f"üìù –ó–∞–¥–∞—á–∞: {job.name}")

def schedule_daily_content(application):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    job_queue = application.job_queue
    
    if job_queue is None:
        logger.error("‚ùå Job queue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")
        return
    
    # 08:30 - –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    job_queue.run_daily(
        ask_for_content,
        time=time(hour=8, minute=30),
        days=(0, 1, 2, 3, 4),  # –ü–Ω-–ü—Ç
        name="content_first_request"
    )
    
    # 09:30 - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
    job_queue.run_daily(
        lambda context: ask_for_content(context),
        time=time(hour=9, minute=30),
        days=(0, 1, 2, 3, 4),
        name="content_second_request"
    )
    
    # 10:00 - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    job_queue.run_daily(
        publish_daily_content,
        time=time(hour=10, minute=0),
        days=(0, 1, 2, 3, 4),
        name="content_publish"
    )
    
    # 00:00 - —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    job_queue.run_daily(
        lambda context: reset_daily_content(),
        time=time(hour=0, minute=0),
        days=(0, 1, 2, 3, 4, 5, 6),
        name="content_reset"
    )
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞")

# --- –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ---
async def test_weekly_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    logger.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /test_weekly")
    await update.message.reply_text("üîß –ó–∞–ø—É—Å–∫–∞—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ –≤—Ä—É—á–Ω—É—é...")
    await weekly_summary(context)
    await update.message.reply_text("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é")

async def test_content_system(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    logger.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    await update.message.reply_text("üîß –ó–∞–ø—É—Å–∫–∞—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    await ask_for_content(context, user_id)

async def show_scheduled_jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    job_queue = context.application.job_queue
    if job_queue is None:
        await update.message.reply_text("‚ùå Job queue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    jobs = job_queue.jobs()
    if not jobs:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    message = "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
    for i, job in enumerate(jobs, 1):
        message += f"{i}. {job.name}\n"
    
    await update.message.reply_text(message)

# --- –ö–û–ú–ê–ù–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
async def show_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /me —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —É—Ä–æ–≤–Ω—è–º–∏"""
    user_id = update.effective_user.id
    user_sessions = [(t, ans) for t, uid, ans in sessions if uid == user_id]
    
    if not user_sessions:
        await update.message.reply_text("üìä –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        plot_buf = create_user_stats_plot(user_id)
        
        if plot_buf:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏
            yes_count = stats_yes[user_id]
            no_count = stats_no[user_id]
            total = yes_count + no_count
            participation_rate = (total / len(successful_polls)) * 100 if successful_polls else 0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
            smoker_level, _ = get_smoker_level(yes_count)
            worker_level, _ = get_worker_level(no_count)
            
            # –°–µ—Ä–∏–π–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            current_streak = max(consecutive_yes[user_id], consecutive_no[user_id])
            streak_type = ""
            if consecutive_yes[user_id] == current_streak:
                streak_type = "–î–∞"
            elif consecutive_no[user_id] == current_streak:
                streak_type = "–ù–µ—Ç"
            
            caption = f"""üìä –¢–≤–æ—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üó≥Ô∏è –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total}
‚úÖ –°–∫–∞–∑–∞–ª '–î–∞': {yes_count}
‚ùå –°–∫–∞–∑–∞–ª '–ù–µ—Ç': {no_count}
üìà –£—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–∞—Ö: {participation_rate:.1f}%

üéØ –¢–≤–æ–∏ —É—Ä–æ–≤–Ω–∏:
üö¨ {smoker_level}
üí™ {worker_level}

üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {current_streak} —Ä–∞–∑ '{streak_type}'"""
            
            await update.message.reply_photo(
                photo=InputFile(plot_buf, filename="my_stats.png"),
                caption=caption
            )
        else:
            # –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            await show_basic_me(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await show_basic_me(update, context)

async def show_basic_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–∞–∑–æ–≤–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è /me —Å —É—Ä–æ–≤–Ω—è–º–∏"""
    user_id = update.effective_user.id
    yes_count = stats_yes[user_id]
    no_count = stats_no[user_id]
    total = yes_count + no_count
    participation_rate = (total / len(successful_polls)) * 100 if successful_polls else 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
    smoker_level, _ = get_smoker_level(yes_count)
    worker_level, _ = get_worker_level(no_count)
    
    # –°–µ—Ä–∏–π–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    current_streak = max(consecutive_yes[user_id], consecutive_no[user_id])
    streak_type = ""
    if consecutive_yes[user_id] == current_streak:
        streak_type = "–î–∞"
    elif consecutive_no[user_id] == current_streak:
        streak_type = "–ù–µ—Ç"
    
    text = f"""üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üó≥Ô∏è –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total}
‚úÖ –°–∫–∞–∑–∞–ª '–î–∞': {yes_count}
‚ùå –°–∫–∞–∑–∞–ª '–ù–µ—Ç': {no_count}
üìà –£—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–∞—Ö: {participation_rate:.1f}%

üéØ –¢–≤–æ–∏ —É—Ä–æ–≤–Ω–∏:
üö¨ {smoker_level}
üí™ {worker_level}

üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {current_streak} —Ä–∞–∑ '{streak_type}'"""
    
    await update.message.reply_text(text)

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_smoke_sessions = len(successful_polls)
    total_votes = len(sessions)
    
    text = f"""üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üö¨ –í—Å–µ–≥–æ –ø–µ—Ä–µ–∫—É—Ä–æ–≤: {total_smoke_sessions}
üó≥Ô∏è –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_votes}

–ò—Å–ø–æ–ª—å–∑—É–π:
/stats_detailed - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
/me - —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
/top - —Ç–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤
/workers_top - —Ç–æ–ø —Ä–∞–±–æ—Ç—è–≥
/test_weekly - —Ç–µ—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤ (–∞–¥–º–∏–Ω)
/test_content - —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∞–¥–º–∏–Ω)
/jobs - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω)"""
    
    await update.message.reply_text(text)

async def show_detailed_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    if not sessions:
        await update.message.reply_text("üìä –ï—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    try:
        plot_buf = create_statistics_plot()
        
        if plot_buf:
            today = datetime.now().date()
            today_votes = sum(1 for t, _, _ in sessions if t.date() == today)
            week_ago = today - timedelta(days=7)
            week_votes = sum(1 for t, _, _ in sessions if t.date() >= week_ago)
            
            most_active_hour = Counter(t.hour for t, _, _ in sessions).most_common(1)[0]
            most_active_day = Counter(t.weekday() for t, _, _ in sessions).most_common(1)[0]
            days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            
            caption = f"""üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üìÖ –°–µ–≥–æ–¥–Ω—è –≥–æ–ª–æ—Å–æ–≤: {today_votes}
üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_votes}
üïê –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Å: {most_active_hour[0]}:00 ({most_active_hour[1]} –≥–æ–ª–æ—Å–æ–≤)
üìÜ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {days[most_active_day[0]]} ({most_active_day[1]} –≥–æ–ª–æ—Å–æ–≤)"""
            
            await update.message.reply_photo(
                photo=InputFile(plot_buf, filename="stats.png"),
                caption=caption
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤ –ø–æ –æ—Ç–≤–µ—Ç–∞–º '–î–∞'"""
    grouped_top = get_grouped_top(dict(stats_yes), get_smoker_level)
    
    if not grouped_top:
        await update.message.reply_text("–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∫—É—Ä–∏–ª üö≠")
        return
    
    top_list = []
    for place, username, count, level in grouped_top:
        top_list.append(f"{place}. {username} ‚Äî {count} ({level})")
    
    await update.message.reply_text("üèÜ –¢–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤:\n\n" + "\n".join(top_list))

# --- –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫—É—Ä–æ–≤.\n\n"
        "–ù–∞–∂–º–∏ '–ö—É—Ä–∏—Ç—å üö¨' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ!",
        reply_markup=reply_markup
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    usernames[user_id] = user.username or user.first_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
    
    now = datetime.now()
    cooldown_remaining = None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º global –¥–ª—è last_poll_time
    global last_poll_time
    
    if last_poll_time:
        time_since_last_poll = now - last_poll_time
        if time_since_last_poll < COOLDOWN:
            remaining_seconds = int((COOLDOWN - time_since_last_poll).total_seconds())
            cooldown_remaining = remaining_seconds
    
    if cooldown_remaining:
        minutes = cooldown_remaining // 60
        seconds = cooldown_remaining % 60
        await update.message.reply_text(
            f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∫—É—Ä –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ {minutes}:{seconds:02d}",
            reply_markup=reply_markup
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    last_press = last_button_press_time.get(user_id, datetime.min)
    if now - last_press < timedelta(seconds=10):
        await update.message.reply_text(
            "‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º!",
            reply_markup=reply_markup
        )
        return
    
    last_button_press_time[user_id] = now
    consecutive_button_press[user_id] += 1
    
    if consecutive_button_press[user_id] >= 5:
        await give_achievement(user_id, context, "–ù–∞—Å—Ç–æ–π—á–∏–≤—ã–π")
    
    try:
        message = await context.bot.send_poll(
            chat_id=GROUP_CHAT_ID,
            question=f"–ü–µ—Ä–µ–∫—É—Ä? ({usernames[user_id]})",
            options=["–î–∞, –∫–æ–Ω–µ—á–Ω–æ", "–ù–µ—Ç"],
            is_anonymous=False,
            open_period=POLL_DURATION
        )
        
        global active_poll_id, active_poll_options, poll_votes
        active_poll_id = message.poll.id
        active_poll_options = ["–î–∞, –∫–æ–Ω–µ—á–Ω–æ", "–ù–µ—Ç"]
        poll_votes = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        
        last_poll_time = now
        
        await update.message.reply_text("‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", reply_markup=reply_markup)

async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–ª–æ—Å"""
    global poll_votes
    
    answer = update.poll_answer
    user_id = answer.user.id
    
    if answer.poll_id != active_poll_id:
        return
    
    if user_id not in usernames:
        try:
            user = await context.bot.get_chat(user_id)
            usernames[user_id] = user.username or user.first_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            usernames[user_id] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    selected_options = answer.option_ids
    if not selected_options:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–æ–∑–≤–∞–ª –≥–æ–ª–æ—Å
        if user_id in poll_votes:
            del poll_votes[user_id]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {usernames[user_id]} –æ—Ç–æ–∑–≤–∞–ª –≥–æ–ª–æ—Å")
        return
    
    selected_option = active_poll_options[selected_options[0]]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
    poll_votes[user_id] = selected_option
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {usernames[user_id]} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª: {selected_option} (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å)")

async def close_poll(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥—Å—á–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    message_id = context.job.data
    try:
        await context.bot.stop_poll(chat_id=GROUP_CHAT_ID, message_id=message_id)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–∫—É—Ä —É—Å–ø–µ—à–Ω—ã–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–æ—Å–∞
        # –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å
        if poll_votes:  # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–ª–æ—Å–∞ –≤ —ç—Ç–æ–º –æ–ø—Ä–æ—Å–µ
            successful_polls.append(datetime.now())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–ª–æ—Å–∞)
            for user_id, answer in poll_votes.items():
                sessions.append((datetime.now(), user_id, answer))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if answer == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ":
                    stats_yes[user_id] += 1
                    consecutive_yes[user_id] += 1
                    consecutive_no[user_id] = 0
                elif answer == "–ù–µ—Ç":
                    stats_no[user_id] += 1
                    consecutive_no[user_id] += 1
                    consecutive_yes[user_id] = 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∞—á–∏–≤–∫–∏ –∏ —É—Ä–æ–≤–Ω–∏
                await check_achievements(user_id, context)
            
            save_data()
            logger.info(f"–û–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç. –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–∫—É—Ä! –ì–æ–ª–æ—Å–æ–≤: {len(poll_votes)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—á–∏–≤–∫–∏ –∑–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            yes_voters = [uid for uid, ans in poll_votes.items() if ans == "–î–∞, –∫–æ–Ω–µ—á–Ω–æ"]
            no_voters = [uid for uid, ans in poll_votes.items() if ans == "–ù–µ—Ç"]
            
            # –ê—á–∏–≤–∫–∞ "–û–¥–∏–Ω –≤ –∫—É—Ä–∏–ª–∫–µ –≤–æ–∏–Ω" - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç "–î–∞"
            if len(yes_voters) == 1:
                await give_achievement(yes_voters[0], context, "–û–¥–∏–Ω –≤ –∫—É—Ä–∏–ª–∫–µ –≤–æ–∏–Ω üèπ")
            
            # –ù–û–í–ê–Ø –ê–ß–ò–í–ö–ê: "–í —Å–æ–ª–æ —Ç–∞—â—É –Ω–∞ —Å–µ–±–µ –∑–∞–≤–æ–¥" - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç "–ù–µ—Ç"
            if len(no_voters) == 1:
                await give_achievement(no_voters[0], context, "–í —Å–æ–ª–æ —Ç–∞—â—É –Ω–∞ —Å–µ–±–µ –∑–∞–≤–æ–¥ üè≠")
                
        else:
            logger.info(f"–û–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç. –ì–æ–ª–æ—Å–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–µ–∫—É—Ä –Ω–µ —Å–æ—Å—Ç–æ—è–ª—Å—è")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")

async def send_common_poll(context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞"""
    global active_poll_id, active_poll_options, last_poll_time, poll_votes
    
    now = datetime.now()
    if last_poll_time and now - last_poll_time < COOLDOWN:
        remaining = COOLDOWN - (now - last_poll_time)
        mins = remaining.seconds // 60
        try:
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=f"‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {mins} –º–∏–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É–ª–¥–∞—É–Ω–µ: {e}")
        return

    question = "–ö—É—Ä–∏–º? üö¨"
    options = ["–î–∞, –∫–æ–Ω–µ—á–Ω–æ", "–ù–µ—Ç"]

    try:
        poll_msg = await context.bot.send_poll(
            chat_id=GROUP_CHAT_ID,
            question=question,
            options=options,
            is_anonymous=False,
            allows_multiple_answers=False
        )
        active_poll_id = poll_msg.poll.id
        active_poll_options = options
        last_poll_time = now
        poll_votes = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        context.application.job_queue.run_once(close_poll, POLL_DURATION, data=poll_msg.message_id)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å (ID: {active_poll_id})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg is None:
        return
        
    user_id = msg.from_user.id
    usernames[user_id] = msg.from_user.full_name

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–í–û–ô –ø—Ä–æ–≤–µ—Ä–∫–æ–π)
    if user_id in asked_today:
        await handle_content_submission(update, context)
        return

    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
    if msg.text == "–ö—É—Ä–∏—Ç—å üö¨":
        now = datetime.now()
        
        if (last_button_press_time[user_id] != datetime.min and 
            now - last_button_press_time[user_id] < COOLDOWN):
            consecutive_button_press[user_id] += 1
            if consecutive_button_press[user_id] >= CONSECUTIVE_THRESHOLD:
                await give_achievement(user_id, context, "–ö–Ω–æ–ø–∫–æ–ª—é–± üñ≤")
        else:
            consecutive_button_press[user_id] = 1
            
        last_button_press_time[user_id] = now
        await send_common_poll(context)

    if msg.text and msg.text.strip().endswith(")"):
        await give_achievement(user_id, context, "–î–µ–¥(–ë–∞–±–∫–∞) –æ–ø—è—Ç—å –Ω–æ–≥—Ç–µ–π –Ω–∞–∫–∏–¥–∞–ª(–∞))))")

    if msg.photo:
        stats_photos[user_id] += 1
        if stats_photos[user_id] >= ACHIEVEMENT_PHOTOS_20:
            await give_achievement(user_id, context, "–ú–µ–º–æ–ª–æ–≥")

    if msg.sticker:
        stats_stickers[user_id] += 1
        if stats_stickers[user_id] >= ACHIEVEMENT_STICKERS_20:
            await give_achievement(user_id, context, "–°—Ç–∏–∫–µ—Ä–æ(WO)MAN")

    save_data()

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        ("/start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        ("/stats", "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫—É—Ä–æ–≤"),
        ("/stats_detailed", "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"),
        ("/me", "–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"),
        ("/top", "–¢–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤"),
        ("/workers_top", "–¢–æ–ø —Ä–∞–±–æ—Ç—è–≥"),
        ("/help", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"),
        ("/reset", "–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        ("/test_weekly", "–¢–µ—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤ (–∞–¥–º–∏–Ω)"),
        ("/test_content", "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∞–¥–º–∏–Ω)"),
        ("/jobs", "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω)"),
    ]
    text = "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join([f"{cmd} ‚Äî {desc}" for cmd, desc in commands])
    await update.message.reply_text(text)

async def reset_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    stats_yes.clear()
    stats_no.clear()
    stats_stickers.clear()
    stats_photos.clear()
    usernames.clear()
    sessions.clear()
    consecutive_yes.clear()
    consecutive_no.clear()
    consecutive_button_press.clear()
    last_button_press_time.clear()
    achievements_unlocked.clear()
    successful_polls.clear()
    user_levels.clear()
    content_submissions.clear()
    asked_today.clear()
    
    save_data()
    await update.message.reply_text("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞—á–∏–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")

def main():
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    load_data()
    
    try:
        app = Application.builder().token(BOT_TOKEN).build()

        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("stats", show_stats))
        app.add_handler(CommandHandler("stats_detailed", show_detailed_stats))
        app.add_handler(CommandHandler("me", show_me))
        app.add_handler(CommandHandler("top", show_top))
        app.add_handler(CommandHandler("workers_top", show_workers_top))
        app.add_handler(CommandHandler("help", show_help))
        app.add_handler(CommandHandler("reset", reset_stats))
        app.add_handler(CommandHandler("test_weekly", test_weekly_summary))
        app.add_handler(CommandHandler("test_content", test_content_system))
        app.add_handler(CommandHandler("jobs", show_scheduled_jobs))

        # –°–æ–æ–±—â–µ–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –í–°–ï —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π)
        app.add_handler(MessageHandler(
            filters.TEXT | filters.PHOTO | filters.VIDEO | filters.AUDIO | 
            filters.Document.ALL | filters.ANIMATION | filters.VOICE | filters.STICKER, 
            handle_message
        ))

        # –û–ø—Ä–æ—Å—ã
        app.add_handler(PollAnswerHandler(handle_poll_answer))

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
        schedule_weekly_summary(app)
        schedule_daily_content(app)
        
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
