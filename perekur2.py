import logging
import json
import os
from collections import defaultdict, Counter
from datetime import datetime, timedelta, time
import io
import matplotlib.pyplot as plt
import numpy as np
import random
import asyncio

from telegram import Update, ReplyKeyboardMarkup, InputFile, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    MessageHandler, filters, PollAnswerHandler
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_CHAT_ID = -1003072750672
ADMIN_ID = 284884293
DATA_FILE = "bot_data.json"
BACKUP_FILE = "bot_data_backup.json"
POLL_DURATION = 600  # 10 –º–∏–Ω—É—Ç
COOLDOWN = timedelta(minutes=15)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è
CONTENT_FIRST_REQUEST_TIME = time(hour=8, minute=30)  # 08:30
CONTENT_RETRY_REQUEST_TIME = time(hour=9, minute=30)  # 09:30 
CONTENT_SEND_TIME = time(hour=10, minute=0)           # 10:00

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ...

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
active_poll_id = None
active_poll_options = []
poll_votes = {}  # –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–ø—Ä–æ—Å–µ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
stats_yes = defaultdict(int)
stats_no = defaultdict(int)
stats_stickers = defaultdict(int)
stats_photos = defaultdict(int)
usernames = {}
sessions = []  # –í—Å–µ —Å–µ—Å—Å–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞)
last_poll_time = None
consecutive_yes = defaultdict(int)
consecutive_no = defaultdict(int)
consecutive_button_press = defaultdict(int)
last_button_press_time = defaultdict(lambda: datetime.min)
achievements_unlocked = defaultdict(set)
successful_polls = []  # –£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–∫—É—Ä—ã (–æ–ø—Ä–æ—Å—ã —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –≥–æ–ª–æ—Å–æ–º)
user_levels = defaultdict(dict)  # {user_id: {"smoker_level": int, "worker_level": int}}

# –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è
pending_daily_content = None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---

def is_workday():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"""
    today = datetime.now().weekday()
    return today < 5  # –ü–Ω-–ü—Ç (0-4)

def select_random_user(used_users=None):
    """–í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)"""
    if used_users is None:
        used_users = set()
    
    # –ë–µ—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = datetime.now() - timedelta(days=7)
    active_users = list(set(
        uid for t, uid, _ in sessions 
        if t >= week_ago and uid != ADMIN_ID  # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∞
    ))
    
    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
    available_users = [uid for uid in active_users if uid not in used_users]
    
    if not available_users:
        return None
    
    return random.choice(available_users)

async def send_content_request(context: ContextTypes.DEFAULT_TYPE, user_id: int, attempt_type: str, used_users=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    global pending_daily_content
    
    if used_users is None:
        used_users = set()
    
    username = usernames.get(user_id, "–£—á–∞—Å—Ç–Ω–∏–∫")
    
    keyboard = [
        ["–ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è üòÑ", "–ú–µ–º –¥–Ω—è üé≠"],
        ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑ üîÑ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    try:
        if attempt_type == "–ø–µ—Ä–≤—ã–π":
            message_text = (f"üéâ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {username}! –¢—ã –≤—ã–±—Ä–∞–Ω –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!\n\n"
                          f"–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ 10:00):")
        else:  # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∏–ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
            message_text = (f"üéâ {username}, —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å!\n\n"
                          f"–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ 10:00):")
        
        await context.bot.send_message(
            chat_id=user_id,
            text=message_text,
            reply_markup=reply_markup
        )
        
        pending_daily_content = {
            "request_time": datetime.now().isoformat(),
            "type": None,
            "content": None,
            "selected_user_id": user_id,
            "attempt_type": attempt_type,
            "used_users": list(used_users)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }
        
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (used: {len(used_users)})")
        save_data()
        
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        used_users.add(user_id)
        await instant_retry(context, used_users, f"–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

async def instant_retry(context: ContextTypes.DEFAULT_TYPE, used_users=None, reason=""):
    """–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if used_users is None:
        used_users = set()
    
    next_user_id = select_random_user(used_users)
    if not next_user_id:
        logger.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        return
    
    await send_content_request(context, next_user_id, "–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π", used_users)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è
async def request_daily_content_first(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ 08:30"""
    global pending_daily_content
    
    if not is_workday():
        logger.info("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return
    
    selected_user_id = select_random_user()
    if not selected_user_id:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return
    
    await send_content_request(context, selected_user_id, "–ø–µ—Ä–≤—ã–π")

async def request_daily_content_retry(context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ 09:30"""
    global pending_daily_content
    
    if not is_workday():
        return
    
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if pending_daily_content and pending_daily_content.get("content"):
        logger.info("–ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –ø–æ–ª—É—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å pending_daily_content –Ω–æ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
    if pending_daily_content and not pending_daily_content.get("content"):
        current_used_users = set(pending_daily_content.get("used_users", []))
        current_user_id = pending_daily_content["selected_user_id"]
        current_used_users.add(current_user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user_id} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ 09:30")
        await instant_retry(context, current_used_users, f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user_id} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫ 09:30")

async def send_daily_content(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –≤ 10:00"""
    global pending_daily_content
    
    if not pending_daily_content or not pending_daily_content.get("content"):
        logger.info("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
        return
    
    try:
        content_type = pending_daily_content["type"]
        content = pending_daily_content["content"]
        
        if content_type == "joke":
            message = f"üòÑ –ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è (–æ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≥–µ—Ä–æ—è):\n\n{content}"
        else:  # meme
            message = f"üé≠ –ú–µ–º –¥–Ω—è (–æ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≥–µ—Ä–æ—è):\n\n{content}"
        
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=message
        )
        
        logger.info("–ö–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –æ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
    
    # –û—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    pending_daily_content = None
    save_data()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def handle_user_content_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    global pending_daily_content
    
    user_id = update.effective_user.id
    
    if not pending_daily_content or pending_daily_content["selected_user_id"] != user_id:
        return
    
    text = update.message.text
    
    if text == "–ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è üòÑ":
        pending_daily_content["type"] = "joke"
        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∞–Ω–µ–∫–¥–æ—Ç (–±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –≤ 10:00):",
            reply_markup=ReplyKeyboardRemove()
        )
        save_data()
        
    elif text == "–ú–µ–º –¥–Ω—è üé≠":
        pending_daily_content["type"] = "meme" 
        await update.message.reply_text(
            "üìù –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –º–µ–º–∞ (–±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –≤ 10:00):",
            reply_markup=ReplyKeyboardRemove()
        )
        save_data()
        
    elif text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑ üîÑ":
        # –ú–ì–ù–û–í–ï–ù–ù–´–ô –ü–ï–†–ï–•–û–î –ö –°–õ–ï–î–£–Æ–©–ï–ú–£
        current_used_users = set(pending_daily_content.get("used_users", []))
        current_used_users.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        
        await update.message.reply_text(
            "‚úÖ –•–æ—Ä–æ—à–æ, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–µ—Ä–æ—è...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª - –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥")
        
        # –ù–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è UX
        await asyncio.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        await instant_retry(context, current_used_users, f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª")

async def handle_user_content_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global pending_daily_content
    
    user_id = update.effective_user.id
    
    if (not pending_daily_content or 
        pending_daily_content["selected_user_id"] != user_id or
        not pending_daily_content["type"]):
        return
    
    content_text = update.message.text
    
    if len(content_text.strip()) < 5:
        await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    pending_daily_content["content"] = content_text
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö (–æ–Ω –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ—é –º–∏—Å—Å–∏—é)
    current_used_users = set(pending_daily_content.get("used_users", []))
    current_used_users.add(user_id)
    pending_daily_content["used_users"] = list(current_used_users)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    content_type_ru = "–∞–Ω–µ–∫–¥–æ—Ç" if pending_daily_content["type"] == "joke" else "–º–µ–º"
    await update.message.reply_text(
        f"‚úÖ {content_type_ru.capitalize()} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –û–Ω –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –≤ 10:00\n\n"
        f"üìã –¢–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç:\n{content_text}"
    )
    
    logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    save_data()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def test_content_system(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    logger.info("üîß –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /test_content")
    await update.message.reply_text("üîß –ó–∞–ø—É—Å–∫–∞—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é...")
    await request_daily_content_first(context)
    await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª—É—á–∞–π–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def schedule_content_system(application):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è"""
    job_queue = application.job_queue
    
    if job_queue is None:
        logger.error("‚ùå Job queue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")
        return
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ 08:30 (–ü–Ω-–ü—Ç)
    job_queue.run_daily(
        request_daily_content_first,
        time=CONTENT_FIRST_REQUEST_TIME,
        days=(0, 1, 2, 3, 4),
        name="content_first_request"
    )
    
    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ 09:30 (–ü–Ω-–ü—Ç)
    job_queue.run_daily(
        request_daily_content_retry,
        time=CONTENT_RETRY_REQUEST_TIME, 
        days=(0, 1, 2, 3, 4),
        name="content_retry_request"
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –≤ 10:00 (–ü–Ω-–ü—Ç)
    job_queue.run_daily(
        send_daily_content,
        time=CONTENT_SEND_TIME,
        days=(0, 1, 2, 3, 4),
        name="content_send"
    )
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: 08:30 ‚Üí 09:30 ‚Üí 10:00 (–ü–Ω-–ü—Ç)")

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    create_backup()
    data = {
        "stats_yes": dict(stats_yes),
        "stats_no": dict(stats_no),
        "stats_stickers": dict(stats_stickers),
        "stats_photos": dict(stats_photos),
        "usernames": usernames,
        "sessions": [(t.isoformat(), uid, ans) for t, uid, ans in sessions],
        "consecutive_yes": dict(consecutive_yes),
        "consecutive_no": dict(consecutive_no),
        "consecutive_button_press": dict(consecutive_button_press),
        "last_button_press_time": {str(k): v.isoformat() for k, v in last_button_press_time.items()},
        "achievements_unlocked": {str(uid): list(achs) for uid, achs in achievements_unlocked.items()},
        "successful_polls": [t.isoformat() for t in successful_polls],
        "user_levels": {str(uid): levels for uid, levels in user_levels.items()},
        "pending_daily_content": pending_daily_content,  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    global stats_yes, stats_no, stats_stickers, stats_photos
    global usernames, sessions, consecutive_yes, consecutive_no, consecutive_button_press
    global last_button_press_time, achievements_unlocked, successful_polls, user_levels
    global pending_daily_content
    
    if not os.path.exists(DATA_FILE):
        logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
        return
    
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        stats_yes.update(data.get("stats_yes", {}))
        stats_no.update(data.get("stats_no", {}))
        stats_stickers.update(data.get("stats_stickers", {}))
        stats_photos.update(data.get("stats_photos", {}))
        usernames.update(data.get("usernames", {}))
        sessions.extend([(datetime.fromisoformat(t), uid, ans) for t, uid, ans in data.get("sessions", [])])
        consecutive_yes.update(data.get("consecutive_yes", {}))
        consecutive_no.update(data.get("consecutive_no", {}))
        consecutive_button_press.update(data.get("consecutive_button_press", {}))
        successful_polls.extend([datetime.fromisoformat(t) for t in data.get("successful_polls", [])])
        user_levels.update({int(uid): levels for uid, levels in data.get("user_levels", {}).items()})
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        pending_daily_content_data = data.get("pending_daily_content")
        if pending_daily_content_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (–±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
            request_time = datetime.fromisoformat(pending_daily_content_data["request_time"])
            if datetime.now() - request_time < timedelta(hours=24):
                pending_daily_content = pending_daily_content_data
                logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        
        last_button_press_time_data = data.get("last_button_press_time", {})
        for k, v in last_button_press_time_data.items():
            try:
                last_button_press_time[int(k)] = datetime.fromisoformat(v)
            except (ValueError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {k}: {e}")
        
        for uid, achs in data.get("achievements_unlocked", {}).items():
            try:
                achievements_unlocked[int(uid)].update(achs)
            except (ValueError, TypeError) as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—á–∏–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        
        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏
async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        ("/start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        ("/stats", "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫—É—Ä–æ–≤"),
        ("/stats_detailed", "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"),
        ("/me", "–¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"),
        ("/top", "–¢–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤"),
        ("/workers_top", "–¢–æ–ø —Ä–∞–±–æ—Ç—è–≥"),
        ("/help", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"),
        ("/reset", "–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        ("/test_weekly", "–¢–µ—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤ (–∞–¥–º–∏–Ω)"),
        ("/test_content", "–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è (–∞–¥–º–∏–Ω)"),
        ("/jobs", "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω)"),
    ]
    text = "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join([f"{cmd} ‚Äî {desc}" for cmd, desc in commands])
    await update.message.reply_text(text)

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_smoke_sessions = len(successful_polls)
    total_votes = len(sessions)
    
    text = f"""üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üö¨ –í—Å–µ–≥–æ –ø–µ—Ä–µ–∫—É—Ä–æ–≤: {total_smoke_sessions}
üó≥Ô∏è –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤: {total_votes}

–ò—Å–ø–æ–ª—å–∑—É–π:
/stats_detailed - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
/me - —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
/top - —Ç–æ–ø –∫—É—Ä–∏–ª—å—â–∏–∫–æ–≤
/workers_top - —Ç–æ–ø —Ä–∞–±–æ—Ç—è–≥
/test_weekly - —Ç–µ—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Ç–æ–≥–æ–≤ (–∞–¥–º–∏–Ω)
/test_content - —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–Ω—è (–∞–¥–º–∏–Ω)
/jobs - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∞–¥–º–∏–Ω)"""
    
    await update.message.reply_text(text)

# –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:
def main():
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    load_data()
    
    try:
        app = Application.builder().token(BOT_TOKEN).build()

        # –ö–æ–º–∞–Ω–¥—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("stats", show_stats))
        app.add_handler(CommandHandler("stats_detailed", show_detailed_stats))
        app.add_handler(CommandHandler("me", show_me))
        app.add_handler(CommandHandler("top", show_top))
        app.add_handler(CommandHandler("workers_top", show_workers_top))
        app.add_handler(CommandHandler("help", show_help))
        app.add_handler(CommandHandler("reset", reset_stats))
        app.add_handler(CommandHandler("test_weekly", test_weekly_summary))
        app.add_handler(CommandHandler("test_content", test_content_system))
        app.add_handler(CommandHandler("jobs", show_scheduled_jobs))

        # –°–æ–æ–±—â–µ–Ω–∏—è
        app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Sticker.ALL, handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        app.add_handler(MessageHandler(
            filters.Text(["–ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è üòÑ", "–ú–µ–º –¥–Ω—è üé≠", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑ üîÑ"]),
            handle_user_content_choice
        ))
        
        app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_user_content_text
        ))

        # –û–ø—Ä–æ—Å—ã
        app.add_handler(PollAnswerHandler(handle_poll_answer))

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
        schedule_weekly_summary(app)
        schedule_content_system(app)
        
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()

